// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info_server/info_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_info_5fserver_2finfo_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_info_5fserver_2finfo_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_info_5fserver_2finfo_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_info_5fserver_2finfo_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_info_5fserver_2finfo_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace info_server {
class AutopilotVersion;
struct AutopilotVersionDefaultTypeInternal;
extern AutopilotVersionDefaultTypeInternal _AutopilotVersion_default_instance_;
class InfoResult;
struct InfoResultDefaultTypeInternal;
extern InfoResultDefaultTypeInternal _InfoResult_default_instance_;
class ProtocolVersion;
struct ProtocolVersionDefaultTypeInternal;
extern ProtocolVersionDefaultTypeInternal _ProtocolVersion_default_instance_;
class ProvideAutopilotVersionRequest;
struct ProvideAutopilotVersionRequestDefaultTypeInternal;
extern ProvideAutopilotVersionRequestDefaultTypeInternal _ProvideAutopilotVersionRequest_default_instance_;
class ProvideAutopilotVersionResponse;
struct ProvideAutopilotVersionResponseDefaultTypeInternal;
extern ProvideAutopilotVersionResponseDefaultTypeInternal _ProvideAutopilotVersionResponse_default_instance_;
class ProvideProtocolVersionRequest;
struct ProvideProtocolVersionRequestDefaultTypeInternal;
extern ProvideProtocolVersionRequestDefaultTypeInternal _ProvideProtocolVersionRequest_default_instance_;
class ProvideProtocolVersionResponse;
struct ProvideProtocolVersionResponseDefaultTypeInternal;
extern ProvideProtocolVersionResponseDefaultTypeInternal _ProvideProtocolVersionResponse_default_instance_;
}  // namespace info_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::info_server::AutopilotVersion* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::AutopilotVersion>(Arena*);
template<> ::mavsdk::rpc::info_server::InfoResult* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(Arena*);
template<> ::mavsdk::rpc::info_server::ProtocolVersion* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProtocolVersion>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideProtocolVersionRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideProtocolVersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace info_server {

enum InfoResult_Result : int {
  InfoResult_Result_RESULT_UNKNOWN = 0,
  InfoResult_Result_RESULT_SUCCESS = 1,
  InfoResult_Result_RESULT_INFORMATION_NOT_RECEIVED_YET = 2,
  InfoResult_Result_RESULT_NO_SYSTEM = 3,
  InfoResult_Result_InfoResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InfoResult_Result_InfoResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InfoResult_Result_IsValid(int value);
constexpr InfoResult_Result InfoResult_Result_Result_MIN = InfoResult_Result_RESULT_UNKNOWN;
constexpr InfoResult_Result InfoResult_Result_Result_MAX = InfoResult_Result_RESULT_NO_SYSTEM;
constexpr int InfoResult_Result_Result_ARRAYSIZE = InfoResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InfoResult_Result_descriptor();
template<typename T>
inline const std::string& InfoResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InfoResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InfoResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InfoResult_Result_descriptor(), enum_t_value);
}
inline bool InfoResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InfoResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InfoResult_Result>(
    InfoResult_Result_descriptor(), name, value);
}
// ===================================================================

class ProvideProtocolVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideProtocolVersionRequest) */ {
 public:
  inline ProvideProtocolVersionRequest() : ProvideProtocolVersionRequest(nullptr) {}
  ~ProvideProtocolVersionRequest() override;
  explicit constexpr ProvideProtocolVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideProtocolVersionRequest(const ProvideProtocolVersionRequest& from);
  ProvideProtocolVersionRequest(ProvideProtocolVersionRequest&& from) noexcept
    : ProvideProtocolVersionRequest() {
    *this = ::std::move(from);
  }

  inline ProvideProtocolVersionRequest& operator=(const ProvideProtocolVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideProtocolVersionRequest& operator=(ProvideProtocolVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideProtocolVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideProtocolVersionRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideProtocolVersionRequest*>(
               &_ProvideProtocolVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProvideProtocolVersionRequest& a, ProvideProtocolVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideProtocolVersionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideProtocolVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideProtocolVersionRequest* New() const final {
    return new ProvideProtocolVersionRequest();
  }

  ProvideProtocolVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideProtocolVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideProtocolVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideProtocolVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideProtocolVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideProtocolVersionRequest";
  }
  protected:
  explicit ProvideProtocolVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideProtocolVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideProtocolVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideProtocolVersionResponse) */ {
 public:
  inline ProvideProtocolVersionResponse() : ProvideProtocolVersionResponse(nullptr) {}
  ~ProvideProtocolVersionResponse() override;
  explicit constexpr ProvideProtocolVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideProtocolVersionResponse(const ProvideProtocolVersionResponse& from);
  ProvideProtocolVersionResponse(ProvideProtocolVersionResponse&& from) noexcept
    : ProvideProtocolVersionResponse() {
    *this = ::std::move(from);
  }

  inline ProvideProtocolVersionResponse& operator=(const ProvideProtocolVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideProtocolVersionResponse& operator=(ProvideProtocolVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideProtocolVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideProtocolVersionResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideProtocolVersionResponse*>(
               &_ProvideProtocolVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProvideProtocolVersionResponse& a, ProvideProtocolVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideProtocolVersionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideProtocolVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideProtocolVersionResponse* New() const final {
    return new ProvideProtocolVersionResponse();
  }

  ProvideProtocolVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideProtocolVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideProtocolVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideProtocolVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideProtocolVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideProtocolVersionResponse";
  }
  protected:
  explicit ProvideProtocolVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kProtocolVersionInfoFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // .mavsdk.rpc.info_server.ProtocolVersion protocol_version_info = 2;
  bool has_protocol_version_info() const;
  private:
  bool _internal_has_protocol_version_info() const;
  public:
  void clear_protocol_version_info();
  const ::mavsdk::rpc::info_server::ProtocolVersion& protocol_version_info() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::ProtocolVersion* release_protocol_version_info();
  ::mavsdk::rpc::info_server::ProtocolVersion* mutable_protocol_version_info();
  void set_allocated_protocol_version_info(::mavsdk::rpc::info_server::ProtocolVersion* protocol_version_info);
  private:
  const ::mavsdk::rpc::info_server::ProtocolVersion& _internal_protocol_version_info() const;
  ::mavsdk::rpc::info_server::ProtocolVersion* _internal_mutable_protocol_version_info();
  public:
  void unsafe_arena_set_allocated_protocol_version_info(
      ::mavsdk::rpc::info_server::ProtocolVersion* protocol_version_info);
  ::mavsdk::rpc::info_server::ProtocolVersion* unsafe_arena_release_protocol_version_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideProtocolVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  ::mavsdk::rpc::info_server::ProtocolVersion* protocol_version_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideAutopilotVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideAutopilotVersionRequest) */ {
 public:
  inline ProvideAutopilotVersionRequest() : ProvideAutopilotVersionRequest(nullptr) {}
  ~ProvideAutopilotVersionRequest() override;
  explicit constexpr ProvideAutopilotVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideAutopilotVersionRequest(const ProvideAutopilotVersionRequest& from);
  ProvideAutopilotVersionRequest(ProvideAutopilotVersionRequest&& from) noexcept
    : ProvideAutopilotVersionRequest() {
    *this = ::std::move(from);
  }

  inline ProvideAutopilotVersionRequest& operator=(const ProvideAutopilotVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideAutopilotVersionRequest& operator=(ProvideAutopilotVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideAutopilotVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideAutopilotVersionRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideAutopilotVersionRequest*>(
               &_ProvideAutopilotVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProvideAutopilotVersionRequest& a, ProvideAutopilotVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideAutopilotVersionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideAutopilotVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideAutopilotVersionRequest* New() const final {
    return new ProvideAutopilotVersionRequest();
  }

  ProvideAutopilotVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideAutopilotVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideAutopilotVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideAutopilotVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideAutopilotVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideAutopilotVersionRequest";
  }
  protected:
  explicit ProvideAutopilotVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideAutopilotVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideAutopilotVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse) */ {
 public:
  inline ProvideAutopilotVersionResponse() : ProvideAutopilotVersionResponse(nullptr) {}
  ~ProvideAutopilotVersionResponse() override;
  explicit constexpr ProvideAutopilotVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideAutopilotVersionResponse(const ProvideAutopilotVersionResponse& from);
  ProvideAutopilotVersionResponse(ProvideAutopilotVersionResponse&& from) noexcept
    : ProvideAutopilotVersionResponse() {
    *this = ::std::move(from);
  }

  inline ProvideAutopilotVersionResponse& operator=(const ProvideAutopilotVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideAutopilotVersionResponse& operator=(ProvideAutopilotVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideAutopilotVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideAutopilotVersionResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideAutopilotVersionResponse*>(
               &_ProvideAutopilotVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProvideAutopilotVersionResponse& a, ProvideAutopilotVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideAutopilotVersionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideAutopilotVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideAutopilotVersionResponse* New() const final {
    return new ProvideAutopilotVersionResponse();
  }

  ProvideAutopilotVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideAutopilotVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideAutopilotVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideAutopilotVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideAutopilotVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideAutopilotVersionResponse";
  }
  protected:
  explicit ProvideAutopilotVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kProtocolVersionInfoFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // .mavsdk.rpc.info_server.AutopilotVersion protocol_version_info = 2;
  bool has_protocol_version_info() const;
  private:
  bool _internal_has_protocol_version_info() const;
  public:
  void clear_protocol_version_info();
  const ::mavsdk::rpc::info_server::AutopilotVersion& protocol_version_info() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::AutopilotVersion* release_protocol_version_info();
  ::mavsdk::rpc::info_server::AutopilotVersion* mutable_protocol_version_info();
  void set_allocated_protocol_version_info(::mavsdk::rpc::info_server::AutopilotVersion* protocol_version_info);
  private:
  const ::mavsdk::rpc::info_server::AutopilotVersion& _internal_protocol_version_info() const;
  ::mavsdk::rpc::info_server::AutopilotVersion* _internal_mutable_protocol_version_info();
  public:
  void unsafe_arena_set_allocated_protocol_version_info(
      ::mavsdk::rpc::info_server::AutopilotVersion* protocol_version_info);
  ::mavsdk::rpc::info_server::AutopilotVersion* unsafe_arena_release_protocol_version_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  ::mavsdk::rpc::info_server::AutopilotVersion* protocol_version_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProtocolVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProtocolVersion) */ {
 public:
  inline ProtocolVersion() : ProtocolVersion(nullptr) {}
  ~ProtocolVersion() override;
  explicit constexpr ProtocolVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolVersion(const ProtocolVersion& from);
  ProtocolVersion(ProtocolVersion&& from) noexcept
    : ProtocolVersion() {
    *this = ::std::move(from);
  }

  inline ProtocolVersion& operator=(const ProtocolVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolVersion& operator=(ProtocolVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolVersion* internal_default_instance() {
    return reinterpret_cast<const ProtocolVersion*>(
               &_ProtocolVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtocolVersion& a, ProtocolVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolVersion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolVersion* New() const final {
    return new ProtocolVersion();
  }

  ProtocolVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProtocolVersion";
  }
  protected:
  explicit ProtocolVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecVersionHashFieldNumber = 4,
    kLibraryVersionHashFieldNumber = 5,
    kVersionFieldNumber = 1,
    kMinVersionFieldNumber = 2,
    kMaxVersionFieldNumber = 3,
  };
  // string spec_version_hash = 4;
  void clear_spec_version_hash();
  const std::string& spec_version_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spec_version_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spec_version_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_spec_version_hash();
  void set_allocated_spec_version_hash(std::string* spec_version_hash);
  private:
  const std::string& _internal_spec_version_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spec_version_hash(const std::string& value);
  std::string* _internal_mutable_spec_version_hash();
  public:

  // string library_version_hash = 5;
  void clear_library_version_hash();
  const std::string& library_version_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_version_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_version_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_library_version_hash();
  void set_allocated_library_version_hash(std::string* library_version_hash);
  private:
  const std::string& _internal_library_version_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_library_version_hash(const std::string& value);
  std::string* _internal_mutable_library_version_hash();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_version = 2;
  void clear_min_version();
  ::PROTOBUF_NAMESPACE_ID::int32 min_version() const;
  void set_min_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_version() const;
  void _internal_set_min_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_version = 3;
  void clear_max_version();
  ::PROTOBUF_NAMESPACE_ID::int32 max_version() const;
  void set_max_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_version() const;
  void _internal_set_max_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProtocolVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spec_version_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_version_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AutopilotVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.AutopilotVersion) */ {
 public:
  inline AutopilotVersion() : AutopilotVersion(nullptr) {}
  ~AutopilotVersion() override;
  explicit constexpr AutopilotVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutopilotVersion(const AutopilotVersion& from);
  AutopilotVersion(AutopilotVersion&& from) noexcept
    : AutopilotVersion() {
    *this = ::std::move(from);
  }

  inline AutopilotVersion& operator=(const AutopilotVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutopilotVersion& operator=(AutopilotVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutopilotVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutopilotVersion* internal_default_instance() {
    return reinterpret_cast<const AutopilotVersion*>(
               &_AutopilotVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutopilotVersion& a, AutopilotVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(AutopilotVersion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutopilotVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutopilotVersion* New() const final {
    return new AutopilotVersion();
  }

  AutopilotVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutopilotVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutopilotVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutopilotVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutopilotVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.AutopilotVersion";
  }
  protected:
  explicit AutopilotVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightSwGitHashFieldNumber = 10,
    kOsSwGitHashFieldNumber = 11,
    kFlightSwMajorFieldNumber = 1,
    kFlightSwMinorFieldNumber = 2,
    kFlightSwPatchFieldNumber = 3,
    kFlightSwVendorMajorFieldNumber = 4,
    kFlightSwVendorMinorFieldNumber = 5,
    kFlightSwVendorPatchFieldNumber = 6,
    kOsSwMajorFieldNumber = 7,
    kOsSwMinorFieldNumber = 8,
    kOsSwPatchFieldNumber = 9,
  };
  // string flight_sw_git_hash = 10;
  void clear_flight_sw_git_hash();
  const std::string& flight_sw_git_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flight_sw_git_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flight_sw_git_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_flight_sw_git_hash();
  void set_allocated_flight_sw_git_hash(std::string* flight_sw_git_hash);
  private:
  const std::string& _internal_flight_sw_git_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flight_sw_git_hash(const std::string& value);
  std::string* _internal_mutable_flight_sw_git_hash();
  public:

  // string os_sw_git_hash = 11;
  void clear_os_sw_git_hash();
  const std::string& os_sw_git_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_sw_git_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_sw_git_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_os_sw_git_hash();
  void set_allocated_os_sw_git_hash(std::string* os_sw_git_hash);
  private:
  const std::string& _internal_os_sw_git_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_sw_git_hash(const std::string& value);
  std::string* _internal_mutable_os_sw_git_hash();
  public:

  // int32 flight_sw_major = 1;
  void clear_flight_sw_major();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_major() const;
  void set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_major() const;
  void _internal_set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_minor = 2;
  void clear_flight_sw_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_minor() const;
  void set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_minor() const;
  void _internal_set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_patch = 3;
  void clear_flight_sw_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_patch() const;
  void set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_patch() const;
  void _internal_set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_vendor_major = 4;
  void clear_flight_sw_vendor_major();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_major() const;
  void set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_vendor_major() const;
  void _internal_set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_vendor_minor = 5;
  void clear_flight_sw_vendor_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_minor() const;
  void set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_vendor_minor() const;
  void _internal_set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_vendor_patch = 6;
  void clear_flight_sw_vendor_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_patch() const;
  void set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_vendor_patch() const;
  void _internal_set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os_sw_major = 7;
  void clear_os_sw_major();
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_major() const;
  void set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_sw_major() const;
  void _internal_set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os_sw_minor = 8;
  void clear_os_sw_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_minor() const;
  void set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_sw_minor() const;
  void _internal_set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os_sw_patch = 9;
  void clear_os_sw_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_patch() const;
  void set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_sw_patch() const;
  void _internal_set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.AutopilotVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flight_sw_git_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_sw_git_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_patch_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_patch_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_patch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class InfoResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.InfoResult) */ {
 public:
  inline InfoResult() : InfoResult(nullptr) {}
  ~InfoResult() override;
  explicit constexpr InfoResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoResult(const InfoResult& from);
  InfoResult(InfoResult&& from) noexcept
    : InfoResult() {
    *this = ::std::move(from);
  }

  inline InfoResult& operator=(const InfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoResult& operator=(InfoResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoResult* internal_default_instance() {
    return reinterpret_cast<const InfoResult*>(
               &_InfoResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InfoResult& a, InfoResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoResult* New() const final {
    return new InfoResult();
  }

  InfoResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.InfoResult";
  }
  protected:
  explicit InfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InfoResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    InfoResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    InfoResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_INFORMATION_NOT_RECEIVED_YET =
    InfoResult_Result_RESULT_INFORMATION_NOT_RECEIVED_YET;
  static constexpr Result RESULT_NO_SYSTEM =
    InfoResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return InfoResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    InfoResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    InfoResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    InfoResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return InfoResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return InfoResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return InfoResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.info_server.InfoResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::info_server::InfoResult_Result result() const;
  void set_result(::mavsdk::rpc::info_server::InfoResult_Result value);
  private:
  ::mavsdk::rpc::info_server::InfoResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::info_server::InfoResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.InfoResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProvideProtocolVersionRequest

// -------------------------------------------------------------------

// ProvideProtocolVersionResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideProtocolVersionResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideProtocolVersionResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideProtocolVersionResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideProtocolVersionResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideProtocolVersionResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.info_result)
  return _internal_info_result();
}
inline void ProvideProtocolVersionResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProtocolVersionResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProtocolVersionResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProtocolVersionResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProtocolVersionResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.info_result)
  return _msg;
}
inline void ProvideProtocolVersionResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.info_result)
}

// .mavsdk.rpc.info_server.ProtocolVersion protocol_version_info = 2;
inline bool ProvideProtocolVersionResponse::_internal_has_protocol_version_info() const {
  return this != internal_default_instance() && protocol_version_info_ != nullptr;
}
inline bool ProvideProtocolVersionResponse::has_protocol_version_info() const {
  return _internal_has_protocol_version_info();
}
inline void ProvideProtocolVersionResponse::clear_protocol_version_info() {
  if (GetArenaForAllocation() == nullptr && protocol_version_info_ != nullptr) {
    delete protocol_version_info_;
  }
  protocol_version_info_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::ProtocolVersion& ProvideProtocolVersionResponse::_internal_protocol_version_info() const {
  const ::mavsdk::rpc::info_server::ProtocolVersion* p = protocol_version_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::ProtocolVersion&>(
      ::mavsdk::rpc::info_server::_ProtocolVersion_default_instance_);
}
inline const ::mavsdk::rpc::info_server::ProtocolVersion& ProvideProtocolVersionResponse::protocol_version_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.protocol_version_info)
  return _internal_protocol_version_info();
}
inline void ProvideProtocolVersionResponse::unsafe_arena_set_allocated_protocol_version_info(
    ::mavsdk::rpc::info_server::ProtocolVersion* protocol_version_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_version_info_);
  }
  protocol_version_info_ = protocol_version_info;
  if (protocol_version_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.protocol_version_info)
}
inline ::mavsdk::rpc::info_server::ProtocolVersion* ProvideProtocolVersionResponse::release_protocol_version_info() {
  
  ::mavsdk::rpc::info_server::ProtocolVersion* temp = protocol_version_info_;
  protocol_version_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::ProtocolVersion* ProvideProtocolVersionResponse::unsafe_arena_release_protocol_version_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.protocol_version_info)
  
  ::mavsdk::rpc::info_server::ProtocolVersion* temp = protocol_version_info_;
  protocol_version_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::ProtocolVersion* ProvideProtocolVersionResponse::_internal_mutable_protocol_version_info() {
  
  if (protocol_version_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::ProtocolVersion>(GetArenaForAllocation());
    protocol_version_info_ = p;
  }
  return protocol_version_info_;
}
inline ::mavsdk::rpc::info_server::ProtocolVersion* ProvideProtocolVersionResponse::mutable_protocol_version_info() {
  ::mavsdk::rpc::info_server::ProtocolVersion* _msg = _internal_mutable_protocol_version_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.protocol_version_info)
  return _msg;
}
inline void ProvideProtocolVersionResponse::set_allocated_protocol_version_info(::mavsdk::rpc::info_server::ProtocolVersion* protocol_version_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protocol_version_info_;
  }
  if (protocol_version_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::ProtocolVersion>::GetOwningArena(protocol_version_info);
    if (message_arena != submessage_arena) {
      protocol_version_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_version_info, submessage_arena);
    }
    
  } else {
    
  }
  protocol_version_info_ = protocol_version_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideProtocolVersionResponse.protocol_version_info)
}

// -------------------------------------------------------------------

// ProvideAutopilotVersionRequest

// -------------------------------------------------------------------

// ProvideAutopilotVersionResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideAutopilotVersionResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideAutopilotVersionResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideAutopilotVersionResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideAutopilotVersionResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideAutopilotVersionResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.info_result)
  return _internal_info_result();
}
inline void ProvideAutopilotVersionResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideAutopilotVersionResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideAutopilotVersionResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideAutopilotVersionResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideAutopilotVersionResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.info_result)
  return _msg;
}
inline void ProvideAutopilotVersionResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.info_result)
}

// .mavsdk.rpc.info_server.AutopilotVersion protocol_version_info = 2;
inline bool ProvideAutopilotVersionResponse::_internal_has_protocol_version_info() const {
  return this != internal_default_instance() && protocol_version_info_ != nullptr;
}
inline bool ProvideAutopilotVersionResponse::has_protocol_version_info() const {
  return _internal_has_protocol_version_info();
}
inline void ProvideAutopilotVersionResponse::clear_protocol_version_info() {
  if (GetArenaForAllocation() == nullptr && protocol_version_info_ != nullptr) {
    delete protocol_version_info_;
  }
  protocol_version_info_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::AutopilotVersion& ProvideAutopilotVersionResponse::_internal_protocol_version_info() const {
  const ::mavsdk::rpc::info_server::AutopilotVersion* p = protocol_version_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::AutopilotVersion&>(
      ::mavsdk::rpc::info_server::_AutopilotVersion_default_instance_);
}
inline const ::mavsdk::rpc::info_server::AutopilotVersion& ProvideAutopilotVersionResponse::protocol_version_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.protocol_version_info)
  return _internal_protocol_version_info();
}
inline void ProvideAutopilotVersionResponse::unsafe_arena_set_allocated_protocol_version_info(
    ::mavsdk::rpc::info_server::AutopilotVersion* protocol_version_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_version_info_);
  }
  protocol_version_info_ = protocol_version_info;
  if (protocol_version_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.protocol_version_info)
}
inline ::mavsdk::rpc::info_server::AutopilotVersion* ProvideAutopilotVersionResponse::release_protocol_version_info() {
  
  ::mavsdk::rpc::info_server::AutopilotVersion* temp = protocol_version_info_;
  protocol_version_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::AutopilotVersion* ProvideAutopilotVersionResponse::unsafe_arena_release_protocol_version_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.protocol_version_info)
  
  ::mavsdk::rpc::info_server::AutopilotVersion* temp = protocol_version_info_;
  protocol_version_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::AutopilotVersion* ProvideAutopilotVersionResponse::_internal_mutable_protocol_version_info() {
  
  if (protocol_version_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::AutopilotVersion>(GetArenaForAllocation());
    protocol_version_info_ = p;
  }
  return protocol_version_info_;
}
inline ::mavsdk::rpc::info_server::AutopilotVersion* ProvideAutopilotVersionResponse::mutable_protocol_version_info() {
  ::mavsdk::rpc::info_server::AutopilotVersion* _msg = _internal_mutable_protocol_version_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.protocol_version_info)
  return _msg;
}
inline void ProvideAutopilotVersionResponse::set_allocated_protocol_version_info(::mavsdk::rpc::info_server::AutopilotVersion* protocol_version_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protocol_version_info_;
  }
  if (protocol_version_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::AutopilotVersion>::GetOwningArena(protocol_version_info);
    if (message_arena != submessage_arena) {
      protocol_version_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_version_info, submessage_arena);
    }
    
  } else {
    
  }
  protocol_version_info_ = protocol_version_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideAutopilotVersionResponse.protocol_version_info)
}

// -------------------------------------------------------------------

// ProtocolVersion

// int32 version = 1;
inline void ProtocolVersion::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolVersion::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolVersion::version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProtocolVersion.version)
  return _internal_version();
}
inline void ProtocolVersion::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void ProtocolVersion::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.ProtocolVersion.version)
}

// int32 min_version = 2;
inline void ProtocolVersion::clear_min_version() {
  min_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolVersion::_internal_min_version() const {
  return min_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolVersion::min_version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProtocolVersion.min_version)
  return _internal_min_version();
}
inline void ProtocolVersion::_internal_set_min_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_version_ = value;
}
inline void ProtocolVersion::set_min_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_version(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.ProtocolVersion.min_version)
}

// int32 max_version = 3;
inline void ProtocolVersion::clear_max_version() {
  max_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolVersion::_internal_max_version() const {
  return max_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolVersion::max_version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProtocolVersion.max_version)
  return _internal_max_version();
}
inline void ProtocolVersion::_internal_set_max_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_version_ = value;
}
inline void ProtocolVersion::set_max_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_version(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.ProtocolVersion.max_version)
}

// string spec_version_hash = 4;
inline void ProtocolVersion::clear_spec_version_hash() {
  spec_version_hash_.ClearToEmpty();
}
inline const std::string& ProtocolVersion::spec_version_hash() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProtocolVersion.spec_version_hash)
  return _internal_spec_version_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolVersion::set_spec_version_hash(ArgT0&& arg0, ArgT... args) {
 
 spec_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.ProtocolVersion.spec_version_hash)
}
inline std::string* ProtocolVersion::mutable_spec_version_hash() {
  std::string* _s = _internal_mutable_spec_version_hash();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProtocolVersion.spec_version_hash)
  return _s;
}
inline const std::string& ProtocolVersion::_internal_spec_version_hash() const {
  return spec_version_hash_.Get();
}
inline void ProtocolVersion::_internal_set_spec_version_hash(const std::string& value) {
  
  spec_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolVersion::_internal_mutable_spec_version_hash() {
  
  return spec_version_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolVersion::release_spec_version_hash() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProtocolVersion.spec_version_hash)
  return spec_version_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolVersion::set_allocated_spec_version_hash(std::string* spec_version_hash) {
  if (spec_version_hash != nullptr) {
    
  } else {
    
  }
  spec_version_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spec_version_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProtocolVersion.spec_version_hash)
}

// string library_version_hash = 5;
inline void ProtocolVersion::clear_library_version_hash() {
  library_version_hash_.ClearToEmpty();
}
inline const std::string& ProtocolVersion::library_version_hash() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProtocolVersion.library_version_hash)
  return _internal_library_version_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolVersion::set_library_version_hash(ArgT0&& arg0, ArgT... args) {
 
 library_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.ProtocolVersion.library_version_hash)
}
inline std::string* ProtocolVersion::mutable_library_version_hash() {
  std::string* _s = _internal_mutable_library_version_hash();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProtocolVersion.library_version_hash)
  return _s;
}
inline const std::string& ProtocolVersion::_internal_library_version_hash() const {
  return library_version_hash_.Get();
}
inline void ProtocolVersion::_internal_set_library_version_hash(const std::string& value) {
  
  library_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolVersion::_internal_mutable_library_version_hash() {
  
  return library_version_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolVersion::release_library_version_hash() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProtocolVersion.library_version_hash)
  return library_version_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolVersion::set_allocated_library_version_hash(std::string* library_version_hash) {
  if (library_version_hash != nullptr) {
    
  } else {
    
  }
  library_version_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_version_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProtocolVersion.library_version_hash)
}

// -------------------------------------------------------------------

// AutopilotVersion

// int32 flight_sw_major = 1;
inline void AutopilotVersion::clear_flight_sw_major() {
  flight_sw_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_flight_sw_major() const {
  return flight_sw_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::flight_sw_major() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_major)
  return _internal_flight_sw_major();
}
inline void AutopilotVersion::_internal_set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_major_ = value;
}
inline void AutopilotVersion::set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_major(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_major)
}

// int32 flight_sw_minor = 2;
inline void AutopilotVersion::clear_flight_sw_minor() {
  flight_sw_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_flight_sw_minor() const {
  return flight_sw_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::flight_sw_minor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_minor)
  return _internal_flight_sw_minor();
}
inline void AutopilotVersion::_internal_set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_minor_ = value;
}
inline void AutopilotVersion::set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_minor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_minor)
}

// int32 flight_sw_patch = 3;
inline void AutopilotVersion::clear_flight_sw_patch() {
  flight_sw_patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_flight_sw_patch() const {
  return flight_sw_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::flight_sw_patch() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_patch)
  return _internal_flight_sw_patch();
}
inline void AutopilotVersion::_internal_set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_patch_ = value;
}
inline void AutopilotVersion::set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_patch(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_patch)
}

// int32 flight_sw_vendor_major = 4;
inline void AutopilotVersion::clear_flight_sw_vendor_major() {
  flight_sw_vendor_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_flight_sw_vendor_major() const {
  return flight_sw_vendor_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::flight_sw_vendor_major() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_vendor_major)
  return _internal_flight_sw_vendor_major();
}
inline void AutopilotVersion::_internal_set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_vendor_major_ = value;
}
inline void AutopilotVersion::set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_vendor_major(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_vendor_major)
}

// int32 flight_sw_vendor_minor = 5;
inline void AutopilotVersion::clear_flight_sw_vendor_minor() {
  flight_sw_vendor_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_flight_sw_vendor_minor() const {
  return flight_sw_vendor_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::flight_sw_vendor_minor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_vendor_minor)
  return _internal_flight_sw_vendor_minor();
}
inline void AutopilotVersion::_internal_set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_vendor_minor_ = value;
}
inline void AutopilotVersion::set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_vendor_minor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_vendor_minor)
}

// int32 flight_sw_vendor_patch = 6;
inline void AutopilotVersion::clear_flight_sw_vendor_patch() {
  flight_sw_vendor_patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_flight_sw_vendor_patch() const {
  return flight_sw_vendor_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::flight_sw_vendor_patch() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_vendor_patch)
  return _internal_flight_sw_vendor_patch();
}
inline void AutopilotVersion::_internal_set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_vendor_patch_ = value;
}
inline void AutopilotVersion::set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_vendor_patch(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_vendor_patch)
}

// int32 os_sw_major = 7;
inline void AutopilotVersion::clear_os_sw_major() {
  os_sw_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_os_sw_major() const {
  return os_sw_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::os_sw_major() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.os_sw_major)
  return _internal_os_sw_major();
}
inline void AutopilotVersion::_internal_set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_sw_major_ = value;
}
inline void AutopilotVersion::set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_sw_major(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.os_sw_major)
}

// int32 os_sw_minor = 8;
inline void AutopilotVersion::clear_os_sw_minor() {
  os_sw_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_os_sw_minor() const {
  return os_sw_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::os_sw_minor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.os_sw_minor)
  return _internal_os_sw_minor();
}
inline void AutopilotVersion::_internal_set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_sw_minor_ = value;
}
inline void AutopilotVersion::set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_sw_minor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.os_sw_minor)
}

// int32 os_sw_patch = 9;
inline void AutopilotVersion::clear_os_sw_patch() {
  os_sw_patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::_internal_os_sw_patch() const {
  return os_sw_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutopilotVersion::os_sw_patch() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.os_sw_patch)
  return _internal_os_sw_patch();
}
inline void AutopilotVersion::_internal_set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_sw_patch_ = value;
}
inline void AutopilotVersion::set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_sw_patch(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.os_sw_patch)
}

// string flight_sw_git_hash = 10;
inline void AutopilotVersion::clear_flight_sw_git_hash() {
  flight_sw_git_hash_.ClearToEmpty();
}
inline const std::string& AutopilotVersion::flight_sw_git_hash() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_git_hash)
  return _internal_flight_sw_git_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutopilotVersion::set_flight_sw_git_hash(ArgT0&& arg0, ArgT... args) {
 
 flight_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_git_hash)
}
inline std::string* AutopilotVersion::mutable_flight_sw_git_hash() {
  std::string* _s = _internal_mutable_flight_sw_git_hash();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_git_hash)
  return _s;
}
inline const std::string& AutopilotVersion::_internal_flight_sw_git_hash() const {
  return flight_sw_git_hash_.Get();
}
inline void AutopilotVersion::_internal_set_flight_sw_git_hash(const std::string& value) {
  
  flight_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutopilotVersion::_internal_mutable_flight_sw_git_hash() {
  
  return flight_sw_git_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutopilotVersion::release_flight_sw_git_hash() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_git_hash)
  return flight_sw_git_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutopilotVersion::set_allocated_flight_sw_git_hash(std::string* flight_sw_git_hash) {
  if (flight_sw_git_hash != nullptr) {
    
  } else {
    
  }
  flight_sw_git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flight_sw_git_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.AutopilotVersion.flight_sw_git_hash)
}

// string os_sw_git_hash = 11;
inline void AutopilotVersion::clear_os_sw_git_hash() {
  os_sw_git_hash_.ClearToEmpty();
}
inline const std::string& AutopilotVersion::os_sw_git_hash() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.AutopilotVersion.os_sw_git_hash)
  return _internal_os_sw_git_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutopilotVersion::set_os_sw_git_hash(ArgT0&& arg0, ArgT... args) {
 
 os_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.AutopilotVersion.os_sw_git_hash)
}
inline std::string* AutopilotVersion::mutable_os_sw_git_hash() {
  std::string* _s = _internal_mutable_os_sw_git_hash();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.AutopilotVersion.os_sw_git_hash)
  return _s;
}
inline const std::string& AutopilotVersion::_internal_os_sw_git_hash() const {
  return os_sw_git_hash_.Get();
}
inline void AutopilotVersion::_internal_set_os_sw_git_hash(const std::string& value) {
  
  os_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutopilotVersion::_internal_mutable_os_sw_git_hash() {
  
  return os_sw_git_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutopilotVersion::release_os_sw_git_hash() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.AutopilotVersion.os_sw_git_hash)
  return os_sw_git_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutopilotVersion::set_allocated_os_sw_git_hash(std::string* os_sw_git_hash) {
  if (os_sw_git_hash != nullptr) {
    
  } else {
    
  }
  os_sw_git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_sw_git_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.AutopilotVersion.os_sw_git_hash)
}

// -------------------------------------------------------------------

// InfoResult

// .mavsdk.rpc.info_server.InfoResult.Result result = 1;
inline void InfoResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::info_server::InfoResult_Result InfoResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::info_server::InfoResult_Result >(result_);
}
inline ::mavsdk::rpc::info_server::InfoResult_Result InfoResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.InfoResult.result)
  return _internal_result();
}
inline void InfoResult::_internal_set_result(::mavsdk::rpc::info_server::InfoResult_Result value) {
  
  result_ = value;
}
inline void InfoResult::set_result(::mavsdk::rpc::info_server::InfoResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.InfoResult.result)
}

// string result_str = 2;
inline void InfoResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& InfoResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.InfoResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.InfoResult.result_str)
}
inline std::string* InfoResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.InfoResult.result_str)
  return _s;
}
inline const std::string& InfoResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void InfoResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InfoResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InfoResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.InfoResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InfoResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.InfoResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace info_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::info_server::InfoResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::info_server::InfoResult_Result>() {
  return ::mavsdk::rpc::info_server::InfoResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_info_5fserver_2finfo_5fserver_2eproto
