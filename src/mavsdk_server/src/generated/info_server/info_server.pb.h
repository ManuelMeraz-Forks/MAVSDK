// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info_server/info_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_info_5fserver_2finfo_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_info_5fserver_2finfo_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_info_5fserver_2finfo_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_info_5fserver_2finfo_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_info_5fserver_2finfo_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace info_server {
class FlightInfo;
struct FlightInfoDefaultTypeInternal;
extern FlightInfoDefaultTypeInternal _FlightInfo_default_instance_;
class Identification;
struct IdentificationDefaultTypeInternal;
extern IdentificationDefaultTypeInternal _Identification_default_instance_;
class InfoResult;
struct InfoResultDefaultTypeInternal;
extern InfoResultDefaultTypeInternal _InfoResult_default_instance_;
class Product;
struct ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class ProvideFlightInformationRequest;
struct ProvideFlightInformationRequestDefaultTypeInternal;
extern ProvideFlightInformationRequestDefaultTypeInternal _ProvideFlightInformationRequest_default_instance_;
class ProvideFlightInformationResponse;
struct ProvideFlightInformationResponseDefaultTypeInternal;
extern ProvideFlightInformationResponseDefaultTypeInternal _ProvideFlightInformationResponse_default_instance_;
class ProvideIdentificationRequest;
struct ProvideIdentificationRequestDefaultTypeInternal;
extern ProvideIdentificationRequestDefaultTypeInternal _ProvideIdentificationRequest_default_instance_;
class ProvideIdentificationResponse;
struct ProvideIdentificationResponseDefaultTypeInternal;
extern ProvideIdentificationResponseDefaultTypeInternal _ProvideIdentificationResponse_default_instance_;
class ProvideProductRequest;
struct ProvideProductRequestDefaultTypeInternal;
extern ProvideProductRequestDefaultTypeInternal _ProvideProductRequest_default_instance_;
class ProvideProductResponse;
struct ProvideProductResponseDefaultTypeInternal;
extern ProvideProductResponseDefaultTypeInternal _ProvideProductResponse_default_instance_;
class ProvideSpeedFactorRequest;
struct ProvideSpeedFactorRequestDefaultTypeInternal;
extern ProvideSpeedFactorRequestDefaultTypeInternal _ProvideSpeedFactorRequest_default_instance_;
class ProvideSpeedFactorResponse;
struct ProvideSpeedFactorResponseDefaultTypeInternal;
extern ProvideSpeedFactorResponseDefaultTypeInternal _ProvideSpeedFactorResponse_default_instance_;
class ProvideVersionRequest;
struct ProvideVersionRequestDefaultTypeInternal;
extern ProvideVersionRequestDefaultTypeInternal _ProvideVersionRequest_default_instance_;
class ProvideVersionResponse;
struct ProvideVersionResponseDefaultTypeInternal;
extern ProvideVersionResponseDefaultTypeInternal _ProvideVersionResponse_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace info_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::info_server::FlightInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::FlightInfo>(Arena*);
template<> ::mavsdk::rpc::info_server::Identification* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::Identification>(Arena*);
template<> ::mavsdk::rpc::info_server::InfoResult* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(Arena*);
template<> ::mavsdk::rpc::info_server::Product* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::Product>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideFlightInformationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideFlightInformationRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideFlightInformationResponse>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideIdentificationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideIdentificationRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideIdentificationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideIdentificationResponse>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideProductRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideProductRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideProductResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideProductResponse>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideSpeedFactorRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideSpeedFactorResponse>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideVersionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideVersionRequest>(Arena*);
template<> ::mavsdk::rpc::info_server::ProvideVersionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::ProvideVersionResponse>(Arena*);
template<> ::mavsdk::rpc::info_server::Version* Arena::CreateMaybeMessage<::mavsdk::rpc::info_server::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace info_server {

enum InfoResult_Result : int {
  InfoResult_Result_RESULT_UNKNOWN = 0,
  InfoResult_Result_RESULT_SUCCESS = 1,
  InfoResult_Result_RESULT_INFORMATION_NOT_RECEIVED_YET = 2,
  InfoResult_Result_RESULT_NO_SYSTEM = 3,
  InfoResult_Result_InfoResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InfoResult_Result_InfoResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InfoResult_Result_IsValid(int value);
constexpr InfoResult_Result InfoResult_Result_Result_MIN = InfoResult_Result_RESULT_UNKNOWN;
constexpr InfoResult_Result InfoResult_Result_Result_MAX = InfoResult_Result_RESULT_NO_SYSTEM;
constexpr int InfoResult_Result_Result_ARRAYSIZE = InfoResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InfoResult_Result_descriptor();
template<typename T>
inline const std::string& InfoResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InfoResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InfoResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InfoResult_Result_descriptor(), enum_t_value);
}
inline bool InfoResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InfoResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InfoResult_Result>(
    InfoResult_Result_descriptor(), name, value);
}
// ===================================================================

class ProvideFlightInformationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideFlightInformationRequest) */ {
 public:
  inline ProvideFlightInformationRequest() : ProvideFlightInformationRequest(nullptr) {}
  ~ProvideFlightInformationRequest() override;
  explicit constexpr ProvideFlightInformationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideFlightInformationRequest(const ProvideFlightInformationRequest& from);
  ProvideFlightInformationRequest(ProvideFlightInformationRequest&& from) noexcept
    : ProvideFlightInformationRequest() {
    *this = ::std::move(from);
  }

  inline ProvideFlightInformationRequest& operator=(const ProvideFlightInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideFlightInformationRequest& operator=(ProvideFlightInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideFlightInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideFlightInformationRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideFlightInformationRequest*>(
               &_ProvideFlightInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProvideFlightInformationRequest& a, ProvideFlightInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideFlightInformationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideFlightInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideFlightInformationRequest* New() const final {
    return new ProvideFlightInformationRequest();
  }

  ProvideFlightInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideFlightInformationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideFlightInformationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideFlightInformationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideFlightInformationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideFlightInformationRequest";
  }
  protected:
  explicit ProvideFlightInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideFlightInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideFlightInformationResponse) */ {
 public:
  inline ProvideFlightInformationResponse() : ProvideFlightInformationResponse(nullptr) {}
  ~ProvideFlightInformationResponse() override;
  explicit constexpr ProvideFlightInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideFlightInformationResponse(const ProvideFlightInformationResponse& from);
  ProvideFlightInformationResponse(ProvideFlightInformationResponse&& from) noexcept
    : ProvideFlightInformationResponse() {
    *this = ::std::move(from);
  }

  inline ProvideFlightInformationResponse& operator=(const ProvideFlightInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideFlightInformationResponse& operator=(ProvideFlightInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideFlightInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideFlightInformationResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideFlightInformationResponse*>(
               &_ProvideFlightInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProvideFlightInformationResponse& a, ProvideFlightInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideFlightInformationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideFlightInformationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideFlightInformationResponse* New() const final {
    return new ProvideFlightInformationResponse();
  }

  ProvideFlightInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideFlightInformationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideFlightInformationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideFlightInformationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideFlightInformationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideFlightInformationResponse";
  }
  protected:
  explicit ProvideFlightInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kFlightInfoFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // .mavsdk.rpc.info_server.FlightInfo flight_info = 2;
  bool has_flight_info() const;
  private:
  bool _internal_has_flight_info() const;
  public:
  void clear_flight_info();
  const ::mavsdk::rpc::info_server::FlightInfo& flight_info() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::FlightInfo* release_flight_info();
  ::mavsdk::rpc::info_server::FlightInfo* mutable_flight_info();
  void set_allocated_flight_info(::mavsdk::rpc::info_server::FlightInfo* flight_info);
  private:
  const ::mavsdk::rpc::info_server::FlightInfo& _internal_flight_info() const;
  ::mavsdk::rpc::info_server::FlightInfo* _internal_mutable_flight_info();
  public:
  void unsafe_arena_set_allocated_flight_info(
      ::mavsdk::rpc::info_server::FlightInfo* flight_info);
  ::mavsdk::rpc::info_server::FlightInfo* unsafe_arena_release_flight_info();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  ::mavsdk::rpc::info_server::FlightInfo* flight_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideIdentificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideIdentificationRequest) */ {
 public:
  inline ProvideIdentificationRequest() : ProvideIdentificationRequest(nullptr) {}
  ~ProvideIdentificationRequest() override;
  explicit constexpr ProvideIdentificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideIdentificationRequest(const ProvideIdentificationRequest& from);
  ProvideIdentificationRequest(ProvideIdentificationRequest&& from) noexcept
    : ProvideIdentificationRequest() {
    *this = ::std::move(from);
  }

  inline ProvideIdentificationRequest& operator=(const ProvideIdentificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideIdentificationRequest& operator=(ProvideIdentificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideIdentificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideIdentificationRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideIdentificationRequest*>(
               &_ProvideIdentificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProvideIdentificationRequest& a, ProvideIdentificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideIdentificationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideIdentificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideIdentificationRequest* New() const final {
    return new ProvideIdentificationRequest();
  }

  ProvideIdentificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideIdentificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideIdentificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideIdentificationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideIdentificationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideIdentificationRequest";
  }
  protected:
  explicit ProvideIdentificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideIdentificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideIdentificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideIdentificationResponse) */ {
 public:
  inline ProvideIdentificationResponse() : ProvideIdentificationResponse(nullptr) {}
  ~ProvideIdentificationResponse() override;
  explicit constexpr ProvideIdentificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideIdentificationResponse(const ProvideIdentificationResponse& from);
  ProvideIdentificationResponse(ProvideIdentificationResponse&& from) noexcept
    : ProvideIdentificationResponse() {
    *this = ::std::move(from);
  }

  inline ProvideIdentificationResponse& operator=(const ProvideIdentificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideIdentificationResponse& operator=(ProvideIdentificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideIdentificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideIdentificationResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideIdentificationResponse*>(
               &_ProvideIdentificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProvideIdentificationResponse& a, ProvideIdentificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideIdentificationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideIdentificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideIdentificationResponse* New() const final {
    return new ProvideIdentificationResponse();
  }

  ProvideIdentificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideIdentificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideIdentificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideIdentificationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideIdentificationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideIdentificationResponse";
  }
  protected:
  explicit ProvideIdentificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kIdentificationFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // .mavsdk.rpc.info_server.Identification identification = 2;
  bool has_identification() const;
  private:
  bool _internal_has_identification() const;
  public:
  void clear_identification();
  const ::mavsdk::rpc::info_server::Identification& identification() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::Identification* release_identification();
  ::mavsdk::rpc::info_server::Identification* mutable_identification();
  void set_allocated_identification(::mavsdk::rpc::info_server::Identification* identification);
  private:
  const ::mavsdk::rpc::info_server::Identification& _internal_identification() const;
  ::mavsdk::rpc::info_server::Identification* _internal_mutable_identification();
  public:
  void unsafe_arena_set_allocated_identification(
      ::mavsdk::rpc::info_server::Identification* identification);
  ::mavsdk::rpc::info_server::Identification* unsafe_arena_release_identification();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideIdentificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  ::mavsdk::rpc::info_server::Identification* identification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideProductRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideProductRequest) */ {
 public:
  inline ProvideProductRequest() : ProvideProductRequest(nullptr) {}
  ~ProvideProductRequest() override;
  explicit constexpr ProvideProductRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideProductRequest(const ProvideProductRequest& from);
  ProvideProductRequest(ProvideProductRequest&& from) noexcept
    : ProvideProductRequest() {
    *this = ::std::move(from);
  }

  inline ProvideProductRequest& operator=(const ProvideProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideProductRequest& operator=(ProvideProductRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideProductRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideProductRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideProductRequest*>(
               &_ProvideProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProvideProductRequest& a, ProvideProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideProductRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideProductRequest* New() const final {
    return new ProvideProductRequest();
  }

  ProvideProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideProductRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideProductRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideProductRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideProductRequest";
  }
  protected:
  explicit ProvideProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideProductResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideProductResponse) */ {
 public:
  inline ProvideProductResponse() : ProvideProductResponse(nullptr) {}
  ~ProvideProductResponse() override;
  explicit constexpr ProvideProductResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideProductResponse(const ProvideProductResponse& from);
  ProvideProductResponse(ProvideProductResponse&& from) noexcept
    : ProvideProductResponse() {
    *this = ::std::move(from);
  }

  inline ProvideProductResponse& operator=(const ProvideProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideProductResponse& operator=(ProvideProductResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideProductResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideProductResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideProductResponse*>(
               &_ProvideProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProvideProductResponse& a, ProvideProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideProductResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideProductResponse* New() const final {
    return new ProvideProductResponse();
  }

  ProvideProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideProductResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideProductResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideProductResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideProductResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideProductResponse";
  }
  protected:
  explicit ProvideProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kProductFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // .mavsdk.rpc.info_server.Product product = 2;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::mavsdk::rpc::info_server::Product& product() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::Product* release_product();
  ::mavsdk::rpc::info_server::Product* mutable_product();
  void set_allocated_product(::mavsdk::rpc::info_server::Product* product);
  private:
  const ::mavsdk::rpc::info_server::Product& _internal_product() const;
  ::mavsdk::rpc::info_server::Product* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::mavsdk::rpc::info_server::Product* product);
  ::mavsdk::rpc::info_server::Product* unsafe_arena_release_product();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  ::mavsdk::rpc::info_server::Product* product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideVersionRequest) */ {
 public:
  inline ProvideVersionRequest() : ProvideVersionRequest(nullptr) {}
  ~ProvideVersionRequest() override;
  explicit constexpr ProvideVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideVersionRequest(const ProvideVersionRequest& from);
  ProvideVersionRequest(ProvideVersionRequest&& from) noexcept
    : ProvideVersionRequest() {
    *this = ::std::move(from);
  }

  inline ProvideVersionRequest& operator=(const ProvideVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideVersionRequest& operator=(ProvideVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideVersionRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideVersionRequest*>(
               &_ProvideVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProvideVersionRequest& a, ProvideVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideVersionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideVersionRequest* New() const final {
    return new ProvideVersionRequest();
  }

  ProvideVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideVersionRequest";
  }
  protected:
  explicit ProvideVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideVersionResponse) */ {
 public:
  inline ProvideVersionResponse() : ProvideVersionResponse(nullptr) {}
  ~ProvideVersionResponse() override;
  explicit constexpr ProvideVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideVersionResponse(const ProvideVersionResponse& from);
  ProvideVersionResponse(ProvideVersionResponse&& from) noexcept
    : ProvideVersionResponse() {
    *this = ::std::move(from);
  }

  inline ProvideVersionResponse& operator=(const ProvideVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideVersionResponse& operator=(ProvideVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideVersionResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideVersionResponse*>(
               &_ProvideVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProvideVersionResponse& a, ProvideVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideVersionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideVersionResponse* New() const final {
    return new ProvideVersionResponse();
  }

  ProvideVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideVersionResponse";
  }
  protected:
  explicit ProvideVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // .mavsdk.rpc.info_server.Version version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::mavsdk::rpc::info_server::Version& version() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::Version* release_version();
  ::mavsdk::rpc::info_server::Version* mutable_version();
  void set_allocated_version(::mavsdk::rpc::info_server::Version* version);
  private:
  const ::mavsdk::rpc::info_server::Version& _internal_version() const;
  ::mavsdk::rpc::info_server::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::mavsdk::rpc::info_server::Version* version);
  ::mavsdk::rpc::info_server::Version* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  ::mavsdk::rpc::info_server::Version* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideSpeedFactorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideSpeedFactorRequest) */ {
 public:
  inline ProvideSpeedFactorRequest() : ProvideSpeedFactorRequest(nullptr) {}
  ~ProvideSpeedFactorRequest() override;
  explicit constexpr ProvideSpeedFactorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideSpeedFactorRequest(const ProvideSpeedFactorRequest& from);
  ProvideSpeedFactorRequest(ProvideSpeedFactorRequest&& from) noexcept
    : ProvideSpeedFactorRequest() {
    *this = ::std::move(from);
  }

  inline ProvideSpeedFactorRequest& operator=(const ProvideSpeedFactorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideSpeedFactorRequest& operator=(ProvideSpeedFactorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideSpeedFactorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideSpeedFactorRequest* internal_default_instance() {
    return reinterpret_cast<const ProvideSpeedFactorRequest*>(
               &_ProvideSpeedFactorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProvideSpeedFactorRequest& a, ProvideSpeedFactorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideSpeedFactorRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideSpeedFactorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideSpeedFactorRequest* New() const final {
    return new ProvideSpeedFactorRequest();
  }

  ProvideSpeedFactorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideSpeedFactorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideSpeedFactorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideSpeedFactorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideSpeedFactorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideSpeedFactorRequest";
  }
  protected:
  explicit ProvideSpeedFactorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideSpeedFactorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.ProvideSpeedFactorResponse) */ {
 public:
  inline ProvideSpeedFactorResponse() : ProvideSpeedFactorResponse(nullptr) {}
  ~ProvideSpeedFactorResponse() override;
  explicit constexpr ProvideSpeedFactorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideSpeedFactorResponse(const ProvideSpeedFactorResponse& from);
  ProvideSpeedFactorResponse(ProvideSpeedFactorResponse&& from) noexcept
    : ProvideSpeedFactorResponse() {
    *this = ::std::move(from);
  }

  inline ProvideSpeedFactorResponse& operator=(const ProvideSpeedFactorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideSpeedFactorResponse& operator=(ProvideSpeedFactorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideSpeedFactorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideSpeedFactorResponse* internal_default_instance() {
    return reinterpret_cast<const ProvideSpeedFactorResponse*>(
               &_ProvideSpeedFactorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProvideSpeedFactorResponse& a, ProvideSpeedFactorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideSpeedFactorResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideSpeedFactorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvideSpeedFactorResponse* New() const final {
    return new ProvideSpeedFactorResponse();
  }

  ProvideSpeedFactorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvideSpeedFactorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideSpeedFactorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvideSpeedFactorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideSpeedFactorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.ProvideSpeedFactorResponse";
  }
  protected:
  explicit ProvideSpeedFactorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoResultFieldNumber = 1,
    kSpeedFactorFieldNumber = 2,
  };
  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  bool has_info_result() const;
  private:
  bool _internal_has_info_result() const;
  public:
  void clear_info_result();
  const ::mavsdk::rpc::info_server::InfoResult& info_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::info_server::InfoResult* release_info_result();
  ::mavsdk::rpc::info_server::InfoResult* mutable_info_result();
  void set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result);
  private:
  const ::mavsdk::rpc::info_server::InfoResult& _internal_info_result() const;
  ::mavsdk::rpc::info_server::InfoResult* _internal_mutable_info_result();
  public:
  void unsafe_arena_set_allocated_info_result(
      ::mavsdk::rpc::info_server::InfoResult* info_result);
  ::mavsdk::rpc::info_server::InfoResult* unsafe_arena_release_info_result();

  // double speed_factor = 2;
  void clear_speed_factor();
  double speed_factor() const;
  void set_speed_factor(double value);
  private:
  double _internal_speed_factor() const;
  void _internal_set_speed_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::info_server::InfoResult* info_result_;
  double speed_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FlightInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.FlightInfo) */ {
 public:
  inline FlightInfo() : FlightInfo(nullptr) {}
  ~FlightInfo() override;
  explicit constexpr FlightInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlightInfo(const FlightInfo& from);
  FlightInfo(FlightInfo&& from) noexcept
    : FlightInfo() {
    *this = ::std::move(from);
  }

  inline FlightInfo& operator=(const FlightInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightInfo& operator=(FlightInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlightInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlightInfo* internal_default_instance() {
    return reinterpret_cast<const FlightInfo*>(
               &_FlightInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FlightInfo& a, FlightInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlightInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlightInfo* New() const final {
    return new FlightInfo();
  }

  FlightInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlightInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlightInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlightInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.FlightInfo";
  }
  protected:
  explicit FlightInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightUidFieldNumber = 2,
    kTimeBootMsFieldNumber = 1,
  };
  // uint64 flight_uid = 2;
  void clear_flight_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 flight_uid() const;
  void set_flight_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_flight_uid() const;
  void _internal_set_flight_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 time_boot_ms = 1;
  void clear_time_boot_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_boot_ms() const;
  void set_time_boot_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_boot_ms() const;
  void _internal_set_time_boot_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.FlightInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 flight_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_boot_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Identification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.Identification) */ {
 public:
  inline Identification() : Identification(nullptr) {}
  ~Identification() override;
  explicit constexpr Identification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identification(const Identification& from);
  Identification(Identification&& from) noexcept
    : Identification() {
    *this = ::std::move(from);
  }

  inline Identification& operator=(const Identification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identification& operator=(Identification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identification* internal_default_instance() {
    return reinterpret_cast<const Identification*>(
               &_Identification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Identification& a, Identification& b) {
    a.Swap(&b);
  }
  inline void Swap(Identification* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identification* New() const final {
    return new Identification();
  }

  Identification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Identification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Identification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.Identification";
  }
  protected:
  explicit Identification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardwareUidFieldNumber = 1,
    kLegacyUidFieldNumber = 2,
  };
  // string hardware_uid = 1;
  void clear_hardware_uid();
  const std::string& hardware_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hardware_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hardware_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_hardware_uid();
  void set_allocated_hardware_uid(std::string* hardware_uid);
  private:
  const std::string& _internal_hardware_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hardware_uid(const std::string& value);
  std::string* _internal_mutable_hardware_uid();
  public:

  // uint64 legacy_uid = 2;
  void clear_legacy_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_uid() const;
  void set_legacy_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_uid() const;
  void _internal_set_legacy_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.Identification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardware_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Product final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.Product) */ {
 public:
  inline Product() : Product(nullptr) {}
  ~Product() override;
  explicit constexpr Product(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Product(const Product& from);
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  inline Product& operator=(Product&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Product& default_instance() {
    return *internal_default_instance();
  }
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }
  inline void Swap(Product* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Product* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return new Product();
  }

  Product* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Product& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Product& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.Product";
  }
  protected:
  explicit Product(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 2,
    kProductNameFieldNumber = 4,
    kVendorIdFieldNumber = 1,
    kProductIdFieldNumber = 3,
  };
  // string vendor_name = 2;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);
  private:
  const std::string& _internal_vendor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_name(const std::string& value);
  std::string* _internal_mutable_vendor_name();
  public:

  // string product_name = 4;
  void clear_product_name();
  const std::string& product_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_product_name();
  void set_allocated_product_name(std::string* product_name);
  private:
  const std::string& _internal_product_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_name(const std::string& value);
  std::string* _internal_mutable_product_name();
  public:

  // int32 vendor_id = 1;
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vendor_id() const;
  void _internal_set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 product_id = 3;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::int32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_product_id() const;
  void _internal_set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.Product)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit constexpr Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return new Version();
  }

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Version& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightSwGitHashFieldNumber = 10,
    kOsSwGitHashFieldNumber = 11,
    kFlightSwMajorFieldNumber = 1,
    kFlightSwMinorFieldNumber = 2,
    kFlightSwPatchFieldNumber = 3,
    kFlightSwVendorMajorFieldNumber = 4,
    kFlightSwVendorMinorFieldNumber = 5,
    kFlightSwVendorPatchFieldNumber = 6,
    kOsSwMajorFieldNumber = 7,
    kOsSwMinorFieldNumber = 8,
    kOsSwPatchFieldNumber = 9,
  };
  // string flight_sw_git_hash = 10;
  void clear_flight_sw_git_hash();
  const std::string& flight_sw_git_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flight_sw_git_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flight_sw_git_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_flight_sw_git_hash();
  void set_allocated_flight_sw_git_hash(std::string* flight_sw_git_hash);
  private:
  const std::string& _internal_flight_sw_git_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flight_sw_git_hash(const std::string& value);
  std::string* _internal_mutable_flight_sw_git_hash();
  public:

  // string os_sw_git_hash = 11;
  void clear_os_sw_git_hash();
  const std::string& os_sw_git_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_sw_git_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_sw_git_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_os_sw_git_hash();
  void set_allocated_os_sw_git_hash(std::string* os_sw_git_hash);
  private:
  const std::string& _internal_os_sw_git_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_sw_git_hash(const std::string& value);
  std::string* _internal_mutable_os_sw_git_hash();
  public:

  // int32 flight_sw_major = 1;
  void clear_flight_sw_major();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_major() const;
  void set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_major() const;
  void _internal_set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_minor = 2;
  void clear_flight_sw_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_minor() const;
  void set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_minor() const;
  void _internal_set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_patch = 3;
  void clear_flight_sw_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_patch() const;
  void set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_patch() const;
  void _internal_set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_vendor_major = 4;
  void clear_flight_sw_vendor_major();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_major() const;
  void set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_vendor_major() const;
  void _internal_set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_vendor_minor = 5;
  void clear_flight_sw_vendor_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_minor() const;
  void set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_vendor_minor() const;
  void _internal_set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flight_sw_vendor_patch = 6;
  void clear_flight_sw_vendor_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_patch() const;
  void set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_sw_vendor_patch() const;
  void _internal_set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os_sw_major = 7;
  void clear_os_sw_major();
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_major() const;
  void set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_sw_major() const;
  void _internal_set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os_sw_minor = 8;
  void clear_os_sw_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_minor() const;
  void set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_sw_minor() const;
  void _internal_set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 os_sw_patch = 9;
  void clear_os_sw_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_patch() const;
  void set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_sw_patch() const;
  void _internal_set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flight_sw_git_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_sw_git_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_patch_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 flight_sw_vendor_patch_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_sw_patch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// -------------------------------------------------------------------

class InfoResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.info_server.InfoResult) */ {
 public:
  inline InfoResult() : InfoResult(nullptr) {}
  ~InfoResult() override;
  explicit constexpr InfoResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoResult(const InfoResult& from);
  InfoResult(InfoResult&& from) noexcept
    : InfoResult() {
    *this = ::std::move(from);
  }

  inline InfoResult& operator=(const InfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoResult& operator=(InfoResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoResult* internal_default_instance() {
    return reinterpret_cast<const InfoResult*>(
               &_InfoResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InfoResult& a, InfoResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoResult* New() const final {
    return new InfoResult();
  }

  InfoResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.info_server.InfoResult";
  }
  protected:
  explicit InfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InfoResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    InfoResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    InfoResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_INFORMATION_NOT_RECEIVED_YET =
    InfoResult_Result_RESULT_INFORMATION_NOT_RECEIVED_YET;
  static constexpr Result RESULT_NO_SYSTEM =
    InfoResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return InfoResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    InfoResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    InfoResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    InfoResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return InfoResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return InfoResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return InfoResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.info_server.InfoResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::info_server::InfoResult_Result result() const;
  void set_result(::mavsdk::rpc::info_server::InfoResult_Result value);
  private:
  ::mavsdk::rpc::info_server::InfoResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::info_server::InfoResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.info_server.InfoResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_info_5fserver_2finfo_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProvideFlightInformationRequest

// -------------------------------------------------------------------

// ProvideFlightInformationResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideFlightInformationResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideFlightInformationResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideFlightInformationResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideFlightInformationResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideFlightInformationResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideFlightInformationResponse.info_result)
  return _internal_info_result();
}
inline void ProvideFlightInformationResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideFlightInformationResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideFlightInformationResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideFlightInformationResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideFlightInformationResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideFlightInformationResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideFlightInformationResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideFlightInformationResponse.info_result)
  return _msg;
}
inline void ProvideFlightInformationResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideFlightInformationResponse.info_result)
}

// .mavsdk.rpc.info_server.FlightInfo flight_info = 2;
inline bool ProvideFlightInformationResponse::_internal_has_flight_info() const {
  return this != internal_default_instance() && flight_info_ != nullptr;
}
inline bool ProvideFlightInformationResponse::has_flight_info() const {
  return _internal_has_flight_info();
}
inline void ProvideFlightInformationResponse::clear_flight_info() {
  if (GetArenaForAllocation() == nullptr && flight_info_ != nullptr) {
    delete flight_info_;
  }
  flight_info_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::FlightInfo& ProvideFlightInformationResponse::_internal_flight_info() const {
  const ::mavsdk::rpc::info_server::FlightInfo* p = flight_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::FlightInfo&>(
      ::mavsdk::rpc::info_server::_FlightInfo_default_instance_);
}
inline const ::mavsdk::rpc::info_server::FlightInfo& ProvideFlightInformationResponse::flight_info() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideFlightInformationResponse.flight_info)
  return _internal_flight_info();
}
inline void ProvideFlightInformationResponse::unsafe_arena_set_allocated_flight_info(
    ::mavsdk::rpc::info_server::FlightInfo* flight_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_info_);
  }
  flight_info_ = flight_info;
  if (flight_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideFlightInformationResponse.flight_info)
}
inline ::mavsdk::rpc::info_server::FlightInfo* ProvideFlightInformationResponse::release_flight_info() {
  
  ::mavsdk::rpc::info_server::FlightInfo* temp = flight_info_;
  flight_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::FlightInfo* ProvideFlightInformationResponse::unsafe_arena_release_flight_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideFlightInformationResponse.flight_info)
  
  ::mavsdk::rpc::info_server::FlightInfo* temp = flight_info_;
  flight_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::FlightInfo* ProvideFlightInformationResponse::_internal_mutable_flight_info() {
  
  if (flight_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::FlightInfo>(GetArenaForAllocation());
    flight_info_ = p;
  }
  return flight_info_;
}
inline ::mavsdk::rpc::info_server::FlightInfo* ProvideFlightInformationResponse::mutable_flight_info() {
  ::mavsdk::rpc::info_server::FlightInfo* _msg = _internal_mutable_flight_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideFlightInformationResponse.flight_info)
  return _msg;
}
inline void ProvideFlightInformationResponse::set_allocated_flight_info(::mavsdk::rpc::info_server::FlightInfo* flight_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete flight_info_;
  }
  if (flight_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::FlightInfo>::GetOwningArena(flight_info);
    if (message_arena != submessage_arena) {
      flight_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flight_info, submessage_arena);
    }
    
  } else {
    
  }
  flight_info_ = flight_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideFlightInformationResponse.flight_info)
}

// -------------------------------------------------------------------

// ProvideIdentificationRequest

// -------------------------------------------------------------------

// ProvideIdentificationResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideIdentificationResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideIdentificationResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideIdentificationResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideIdentificationResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideIdentificationResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideIdentificationResponse.info_result)
  return _internal_info_result();
}
inline void ProvideIdentificationResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideIdentificationResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideIdentificationResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideIdentificationResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideIdentificationResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideIdentificationResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideIdentificationResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideIdentificationResponse.info_result)
  return _msg;
}
inline void ProvideIdentificationResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideIdentificationResponse.info_result)
}

// .mavsdk.rpc.info_server.Identification identification = 2;
inline bool ProvideIdentificationResponse::_internal_has_identification() const {
  return this != internal_default_instance() && identification_ != nullptr;
}
inline bool ProvideIdentificationResponse::has_identification() const {
  return _internal_has_identification();
}
inline void ProvideIdentificationResponse::clear_identification() {
  if (GetArenaForAllocation() == nullptr && identification_ != nullptr) {
    delete identification_;
  }
  identification_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::Identification& ProvideIdentificationResponse::_internal_identification() const {
  const ::mavsdk::rpc::info_server::Identification* p = identification_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::Identification&>(
      ::mavsdk::rpc::info_server::_Identification_default_instance_);
}
inline const ::mavsdk::rpc::info_server::Identification& ProvideIdentificationResponse::identification() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideIdentificationResponse.identification)
  return _internal_identification();
}
inline void ProvideIdentificationResponse::unsafe_arena_set_allocated_identification(
    ::mavsdk::rpc::info_server::Identification* identification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identification_);
  }
  identification_ = identification;
  if (identification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideIdentificationResponse.identification)
}
inline ::mavsdk::rpc::info_server::Identification* ProvideIdentificationResponse::release_identification() {
  
  ::mavsdk::rpc::info_server::Identification* temp = identification_;
  identification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::Identification* ProvideIdentificationResponse::unsafe_arena_release_identification() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideIdentificationResponse.identification)
  
  ::mavsdk::rpc::info_server::Identification* temp = identification_;
  identification_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::Identification* ProvideIdentificationResponse::_internal_mutable_identification() {
  
  if (identification_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::Identification>(GetArenaForAllocation());
    identification_ = p;
  }
  return identification_;
}
inline ::mavsdk::rpc::info_server::Identification* ProvideIdentificationResponse::mutable_identification() {
  ::mavsdk::rpc::info_server::Identification* _msg = _internal_mutable_identification();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideIdentificationResponse.identification)
  return _msg;
}
inline void ProvideIdentificationResponse::set_allocated_identification(::mavsdk::rpc::info_server::Identification* identification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete identification_;
  }
  if (identification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::Identification>::GetOwningArena(identification);
    if (message_arena != submessage_arena) {
      identification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identification, submessage_arena);
    }
    
  } else {
    
  }
  identification_ = identification;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideIdentificationResponse.identification)
}

// -------------------------------------------------------------------

// ProvideProductRequest

// -------------------------------------------------------------------

// ProvideProductResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideProductResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideProductResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideProductResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideProductResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideProductResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideProductResponse.info_result)
  return _internal_info_result();
}
inline void ProvideProductResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideProductResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProductResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProductResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideProductResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProductResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideProductResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideProductResponse.info_result)
  return _msg;
}
inline void ProvideProductResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideProductResponse.info_result)
}

// .mavsdk.rpc.info_server.Product product = 2;
inline bool ProvideProductResponse::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool ProvideProductResponse::has_product() const {
  return _internal_has_product();
}
inline void ProvideProductResponse::clear_product() {
  if (GetArenaForAllocation() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::Product& ProvideProductResponse::_internal_product() const {
  const ::mavsdk::rpc::info_server::Product* p = product_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::Product&>(
      ::mavsdk::rpc::info_server::_Product_default_instance_);
}
inline const ::mavsdk::rpc::info_server::Product& ProvideProductResponse::product() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideProductResponse.product)
  return _internal_product();
}
inline void ProvideProductResponse::unsafe_arena_set_allocated_product(
    ::mavsdk::rpc::info_server::Product* product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideProductResponse.product)
}
inline ::mavsdk::rpc::info_server::Product* ProvideProductResponse::release_product() {
  
  ::mavsdk::rpc::info_server::Product* temp = product_;
  product_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::Product* ProvideProductResponse::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideProductResponse.product)
  
  ::mavsdk::rpc::info_server::Product* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::Product* ProvideProductResponse::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::Product>(GetArenaForAllocation());
    product_ = p;
  }
  return product_;
}
inline ::mavsdk::rpc::info_server::Product* ProvideProductResponse::mutable_product() {
  ::mavsdk::rpc::info_server::Product* _msg = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideProductResponse.product)
  return _msg;
}
inline void ProvideProductResponse::set_allocated_product(::mavsdk::rpc::info_server::Product* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::Product>::GetOwningArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideProductResponse.product)
}

// -------------------------------------------------------------------

// ProvideVersionRequest

// -------------------------------------------------------------------

// ProvideVersionResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideVersionResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideVersionResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideVersionResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideVersionResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideVersionResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideVersionResponse.info_result)
  return _internal_info_result();
}
inline void ProvideVersionResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideVersionResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideVersionResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideVersionResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideVersionResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideVersionResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideVersionResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideVersionResponse.info_result)
  return _msg;
}
inline void ProvideVersionResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideVersionResponse.info_result)
}

// .mavsdk.rpc.info_server.Version version = 2;
inline bool ProvideVersionResponse::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool ProvideVersionResponse::has_version() const {
  return _internal_has_version();
}
inline void ProvideVersionResponse::clear_version() {
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::Version& ProvideVersionResponse::_internal_version() const {
  const ::mavsdk::rpc::info_server::Version* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::Version&>(
      ::mavsdk::rpc::info_server::_Version_default_instance_);
}
inline const ::mavsdk::rpc::info_server::Version& ProvideVersionResponse::version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideVersionResponse.version)
  return _internal_version();
}
inline void ProvideVersionResponse::unsafe_arena_set_allocated_version(
    ::mavsdk::rpc::info_server::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideVersionResponse.version)
}
inline ::mavsdk::rpc::info_server::Version* ProvideVersionResponse::release_version() {
  
  ::mavsdk::rpc::info_server::Version* temp = version_;
  version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::Version* ProvideVersionResponse::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideVersionResponse.version)
  
  ::mavsdk::rpc::info_server::Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::Version* ProvideVersionResponse::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::Version>(GetArenaForAllocation());
    version_ = p;
  }
  return version_;
}
inline ::mavsdk::rpc::info_server::Version* ProvideVersionResponse::mutable_version() {
  ::mavsdk::rpc::info_server::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideVersionResponse.version)
  return _msg;
}
inline void ProvideVersionResponse::set_allocated_version(::mavsdk::rpc::info_server::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::Version>::GetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideVersionResponse.version)
}

// -------------------------------------------------------------------

// ProvideSpeedFactorRequest

// -------------------------------------------------------------------

// ProvideSpeedFactorResponse

// .mavsdk.rpc.info_server.InfoResult info_result = 1;
inline bool ProvideSpeedFactorResponse::_internal_has_info_result() const {
  return this != internal_default_instance() && info_result_ != nullptr;
}
inline bool ProvideSpeedFactorResponse::has_info_result() const {
  return _internal_has_info_result();
}
inline void ProvideSpeedFactorResponse::clear_info_result() {
  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideSpeedFactorResponse::_internal_info_result() const {
  const ::mavsdk::rpc::info_server::InfoResult* p = info_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::info_server::InfoResult&>(
      ::mavsdk::rpc::info_server::_InfoResult_default_instance_);
}
inline const ::mavsdk::rpc::info_server::InfoResult& ProvideSpeedFactorResponse::info_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.info_result)
  return _internal_info_result();
}
inline void ProvideSpeedFactorResponse::unsafe_arena_set_allocated_info_result(
    ::mavsdk::rpc::info_server::InfoResult* info_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_result_);
  }
  info_result_ = info_result;
  if (info_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.info_result)
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideSpeedFactorResponse::release_info_result() {
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideSpeedFactorResponse::unsafe_arena_release_info_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.info_result)
  
  ::mavsdk::rpc::info_server::InfoResult* temp = info_result_;
  info_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideSpeedFactorResponse::_internal_mutable_info_result() {
  
  if (info_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::info_server::InfoResult>(GetArenaForAllocation());
    info_result_ = p;
  }
  return info_result_;
}
inline ::mavsdk::rpc::info_server::InfoResult* ProvideSpeedFactorResponse::mutable_info_result() {
  ::mavsdk::rpc::info_server::InfoResult* _msg = _internal_mutable_info_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.info_result)
  return _msg;
}
inline void ProvideSpeedFactorResponse::set_allocated_info_result(::mavsdk::rpc::info_server::InfoResult* info_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_result_;
  }
  if (info_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::info_server::InfoResult>::GetOwningArena(info_result);
    if (message_arena != submessage_arena) {
      info_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_result, submessage_arena);
    }
    
  } else {
    
  }
  info_result_ = info_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.info_result)
}

// double speed_factor = 2;
inline void ProvideSpeedFactorResponse::clear_speed_factor() {
  speed_factor_ = 0;
}
inline double ProvideSpeedFactorResponse::_internal_speed_factor() const {
  return speed_factor_;
}
inline double ProvideSpeedFactorResponse::speed_factor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.speed_factor)
  return _internal_speed_factor();
}
inline void ProvideSpeedFactorResponse::_internal_set_speed_factor(double value) {
  
  speed_factor_ = value;
}
inline void ProvideSpeedFactorResponse::set_speed_factor(double value) {
  _internal_set_speed_factor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.ProvideSpeedFactorResponse.speed_factor)
}

// -------------------------------------------------------------------

// FlightInfo

// uint32 time_boot_ms = 1;
inline void FlightInfo::clear_time_boot_ms() {
  time_boot_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlightInfo::_internal_time_boot_ms() const {
  return time_boot_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlightInfo::time_boot_ms() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.FlightInfo.time_boot_ms)
  return _internal_time_boot_ms();
}
inline void FlightInfo::_internal_set_time_boot_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_boot_ms_ = value;
}
inline void FlightInfo::set_time_boot_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_boot_ms(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.FlightInfo.time_boot_ms)
}

// uint64 flight_uid = 2;
inline void FlightInfo::clear_flight_uid() {
  flight_uid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlightInfo::_internal_flight_uid() const {
  return flight_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlightInfo::flight_uid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.FlightInfo.flight_uid)
  return _internal_flight_uid();
}
inline void FlightInfo::_internal_set_flight_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  flight_uid_ = value;
}
inline void FlightInfo::set_flight_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_flight_uid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.FlightInfo.flight_uid)
}

// -------------------------------------------------------------------

// Identification

// string hardware_uid = 1;
inline void Identification::clear_hardware_uid() {
  hardware_uid_.ClearToEmpty();
}
inline const std::string& Identification::hardware_uid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Identification.hardware_uid)
  return _internal_hardware_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identification::set_hardware_uid(ArgT0&& arg0, ArgT... args) {
 
 hardware_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Identification.hardware_uid)
}
inline std::string* Identification::mutable_hardware_uid() {
  std::string* _s = _internal_mutable_hardware_uid();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.Identification.hardware_uid)
  return _s;
}
inline const std::string& Identification::_internal_hardware_uid() const {
  return hardware_uid_.Get();
}
inline void Identification::_internal_set_hardware_uid(const std::string& value) {
  
  hardware_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identification::_internal_mutable_hardware_uid() {
  
  return hardware_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identification::release_hardware_uid() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.Identification.hardware_uid)
  return hardware_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identification::set_allocated_hardware_uid(std::string* hardware_uid) {
  if (hardware_uid != nullptr) {
    
  } else {
    
  }
  hardware_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hardware_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.Identification.hardware_uid)
}

// uint64 legacy_uid = 2;
inline void Identification::clear_legacy_uid() {
  legacy_uid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Identification::_internal_legacy_uid() const {
  return legacy_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Identification::legacy_uid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Identification.legacy_uid)
  return _internal_legacy_uid();
}
inline void Identification::_internal_set_legacy_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  legacy_uid_ = value;
}
inline void Identification::set_legacy_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_uid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Identification.legacy_uid)
}

// -------------------------------------------------------------------

// Product

// int32 vendor_id = 1;
inline void Product::clear_vendor_id() {
  vendor_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Product::_internal_vendor_id() const {
  return vendor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Product::vendor_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Product.vendor_id)
  return _internal_vendor_id();
}
inline void Product::_internal_set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vendor_id_ = value;
}
inline void Product::set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Product.vendor_id)
}

// string vendor_name = 2;
inline void Product::clear_vendor_name() {
  vendor_name_.ClearToEmpty();
}
inline const std::string& Product::vendor_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Product.vendor_name)
  return _internal_vendor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_vendor_name(ArgT0&& arg0, ArgT... args) {
 
 vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Product.vendor_name)
}
inline std::string* Product::mutable_vendor_name() {
  std::string* _s = _internal_mutable_vendor_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.Product.vendor_name)
  return _s;
}
inline const std::string& Product::_internal_vendor_name() const {
  return vendor_name_.Get();
}
inline void Product::_internal_set_vendor_name(const std::string& value) {
  
  vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_vendor_name() {
  
  return vendor_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Product::release_vendor_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.Product.vendor_name)
  return vendor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Product::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    
  } else {
    
  }
  vendor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.Product.vendor_name)
}

// int32 product_id = 3;
inline void Product::clear_product_id() {
  product_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Product::_internal_product_id() const {
  return product_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Product::product_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Product.product_id)
  return _internal_product_id();
}
inline void Product::_internal_set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  product_id_ = value;
}
inline void Product::set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Product.product_id)
}

// string product_name = 4;
inline void Product::clear_product_name() {
  product_name_.ClearToEmpty();
}
inline const std::string& Product::product_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Product.product_name)
  return _internal_product_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_product_name(ArgT0&& arg0, ArgT... args) {
 
 product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Product.product_name)
}
inline std::string* Product::mutable_product_name() {
  std::string* _s = _internal_mutable_product_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.Product.product_name)
  return _s;
}
inline const std::string& Product::_internal_product_name() const {
  return product_name_.Get();
}
inline void Product::_internal_set_product_name(const std::string& value) {
  
  product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_product_name() {
  
  return product_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Product::release_product_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.Product.product_name)
  return product_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Product::set_allocated_product_name(std::string* product_name) {
  if (product_name != nullptr) {
    
  } else {
    
  }
  product_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.Product.product_name)
}

// -------------------------------------------------------------------

// Version

// int32 flight_sw_major = 1;
inline void Version::clear_flight_sw_major() {
  flight_sw_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_flight_sw_major() const {
  return flight_sw_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::flight_sw_major() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_major)
  return _internal_flight_sw_major();
}
inline void Version::_internal_set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_major_ = value;
}
inline void Version::set_flight_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_major(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_major)
}

// int32 flight_sw_minor = 2;
inline void Version::clear_flight_sw_minor() {
  flight_sw_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_flight_sw_minor() const {
  return flight_sw_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::flight_sw_minor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_minor)
  return _internal_flight_sw_minor();
}
inline void Version::_internal_set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_minor_ = value;
}
inline void Version::set_flight_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_minor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_minor)
}

// int32 flight_sw_patch = 3;
inline void Version::clear_flight_sw_patch() {
  flight_sw_patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_flight_sw_patch() const {
  return flight_sw_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::flight_sw_patch() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_patch)
  return _internal_flight_sw_patch();
}
inline void Version::_internal_set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_patch_ = value;
}
inline void Version::set_flight_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_patch(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_patch)
}

// int32 flight_sw_vendor_major = 4;
inline void Version::clear_flight_sw_vendor_major() {
  flight_sw_vendor_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_flight_sw_vendor_major() const {
  return flight_sw_vendor_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::flight_sw_vendor_major() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_vendor_major)
  return _internal_flight_sw_vendor_major();
}
inline void Version::_internal_set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_vendor_major_ = value;
}
inline void Version::set_flight_sw_vendor_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_vendor_major(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_vendor_major)
}

// int32 flight_sw_vendor_minor = 5;
inline void Version::clear_flight_sw_vendor_minor() {
  flight_sw_vendor_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_flight_sw_vendor_minor() const {
  return flight_sw_vendor_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::flight_sw_vendor_minor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_vendor_minor)
  return _internal_flight_sw_vendor_minor();
}
inline void Version::_internal_set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_vendor_minor_ = value;
}
inline void Version::set_flight_sw_vendor_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_vendor_minor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_vendor_minor)
}

// int32 flight_sw_vendor_patch = 6;
inline void Version::clear_flight_sw_vendor_patch() {
  flight_sw_vendor_patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_flight_sw_vendor_patch() const {
  return flight_sw_vendor_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::flight_sw_vendor_patch() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_vendor_patch)
  return _internal_flight_sw_vendor_patch();
}
inline void Version::_internal_set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flight_sw_vendor_patch_ = value;
}
inline void Version::set_flight_sw_vendor_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flight_sw_vendor_patch(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_vendor_patch)
}

// int32 os_sw_major = 7;
inline void Version::clear_os_sw_major() {
  os_sw_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_os_sw_major() const {
  return os_sw_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::os_sw_major() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.os_sw_major)
  return _internal_os_sw_major();
}
inline void Version::_internal_set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_sw_major_ = value;
}
inline void Version::set_os_sw_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_sw_major(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.os_sw_major)
}

// int32 os_sw_minor = 8;
inline void Version::clear_os_sw_minor() {
  os_sw_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_os_sw_minor() const {
  return os_sw_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::os_sw_minor() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.os_sw_minor)
  return _internal_os_sw_minor();
}
inline void Version::_internal_set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_sw_minor_ = value;
}
inline void Version::set_os_sw_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_sw_minor(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.os_sw_minor)
}

// int32 os_sw_patch = 9;
inline void Version::clear_os_sw_patch() {
  os_sw_patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_os_sw_patch() const {
  return os_sw_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::os_sw_patch() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.os_sw_patch)
  return _internal_os_sw_patch();
}
inline void Version::_internal_set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_sw_patch_ = value;
}
inline void Version::set_os_sw_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_sw_patch(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.os_sw_patch)
}

// string flight_sw_git_hash = 10;
inline void Version::clear_flight_sw_git_hash() {
  flight_sw_git_hash_.ClearToEmpty();
}
inline const std::string& Version::flight_sw_git_hash() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.flight_sw_git_hash)
  return _internal_flight_sw_git_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_flight_sw_git_hash(ArgT0&& arg0, ArgT... args) {
 
 flight_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.flight_sw_git_hash)
}
inline std::string* Version::mutable_flight_sw_git_hash() {
  std::string* _s = _internal_mutable_flight_sw_git_hash();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.Version.flight_sw_git_hash)
  return _s;
}
inline const std::string& Version::_internal_flight_sw_git_hash() const {
  return flight_sw_git_hash_.Get();
}
inline void Version::_internal_set_flight_sw_git_hash(const std::string& value) {
  
  flight_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_flight_sw_git_hash() {
  
  return flight_sw_git_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Version::release_flight_sw_git_hash() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.Version.flight_sw_git_hash)
  return flight_sw_git_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Version::set_allocated_flight_sw_git_hash(std::string* flight_sw_git_hash) {
  if (flight_sw_git_hash != nullptr) {
    
  } else {
    
  }
  flight_sw_git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flight_sw_git_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.Version.flight_sw_git_hash)
}

// string os_sw_git_hash = 11;
inline void Version::clear_os_sw_git_hash() {
  os_sw_git_hash_.ClearToEmpty();
}
inline const std::string& Version::os_sw_git_hash() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.Version.os_sw_git_hash)
  return _internal_os_sw_git_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_os_sw_git_hash(ArgT0&& arg0, ArgT... args) {
 
 os_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.Version.os_sw_git_hash)
}
inline std::string* Version::mutable_os_sw_git_hash() {
  std::string* _s = _internal_mutable_os_sw_git_hash();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.Version.os_sw_git_hash)
  return _s;
}
inline const std::string& Version::_internal_os_sw_git_hash() const {
  return os_sw_git_hash_.Get();
}
inline void Version::_internal_set_os_sw_git_hash(const std::string& value) {
  
  os_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_os_sw_git_hash() {
  
  return os_sw_git_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Version::release_os_sw_git_hash() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.Version.os_sw_git_hash)
  return os_sw_git_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Version::set_allocated_os_sw_git_hash(std::string* os_sw_git_hash) {
  if (os_sw_git_hash != nullptr) {
    
  } else {
    
  }
  os_sw_git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_sw_git_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.Version.os_sw_git_hash)
}

// -------------------------------------------------------------------

// InfoResult

// .mavsdk.rpc.info_server.InfoResult.Result result = 1;
inline void InfoResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::info_server::InfoResult_Result InfoResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::info_server::InfoResult_Result >(result_);
}
inline ::mavsdk::rpc::info_server::InfoResult_Result InfoResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.InfoResult.result)
  return _internal_result();
}
inline void InfoResult::_internal_set_result(::mavsdk::rpc::info_server::InfoResult_Result value) {
  
  result_ = value;
}
inline void InfoResult::set_result(::mavsdk::rpc::info_server::InfoResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.InfoResult.result)
}

// string result_str = 2;
inline void InfoResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& InfoResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.info_server.InfoResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.info_server.InfoResult.result_str)
}
inline std::string* InfoResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.info_server.InfoResult.result_str)
  return _s;
}
inline const std::string& InfoResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void InfoResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InfoResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InfoResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.info_server.InfoResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InfoResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.info_server.InfoResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace info_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::info_server::InfoResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::info_server::InfoResult_Result>() {
  return ::mavsdk::rpc::info_server::InfoResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_info_5fserver_2finfo_5fserver_2eproto
