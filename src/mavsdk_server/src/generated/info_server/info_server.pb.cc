// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info_server/info_server.proto

#include "info_server/info_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mavsdk {
namespace rpc {
namespace info_server {
constexpr ProvideFlightInformationRequest::ProvideFlightInformationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProvideFlightInformationRequestDefaultTypeInternal {
  constexpr ProvideFlightInformationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideFlightInformationRequestDefaultTypeInternal() {}
  union {
    ProvideFlightInformationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideFlightInformationRequestDefaultTypeInternal _ProvideFlightInformationRequest_default_instance_;
constexpr ProvideFlightInformationResponse::ProvideFlightInformationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_result_(nullptr)
  , flight_info_(nullptr){}
struct ProvideFlightInformationResponseDefaultTypeInternal {
  constexpr ProvideFlightInformationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideFlightInformationResponseDefaultTypeInternal() {}
  union {
    ProvideFlightInformationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideFlightInformationResponseDefaultTypeInternal _ProvideFlightInformationResponse_default_instance_;
constexpr ProvideIdentificationRequest::ProvideIdentificationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProvideIdentificationRequestDefaultTypeInternal {
  constexpr ProvideIdentificationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideIdentificationRequestDefaultTypeInternal() {}
  union {
    ProvideIdentificationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideIdentificationRequestDefaultTypeInternal _ProvideIdentificationRequest_default_instance_;
constexpr ProvideIdentificationResponse::ProvideIdentificationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_result_(nullptr)
  , identification_(nullptr){}
struct ProvideIdentificationResponseDefaultTypeInternal {
  constexpr ProvideIdentificationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideIdentificationResponseDefaultTypeInternal() {}
  union {
    ProvideIdentificationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideIdentificationResponseDefaultTypeInternal _ProvideIdentificationResponse_default_instance_;
constexpr ProvideProductRequest::ProvideProductRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProvideProductRequestDefaultTypeInternal {
  constexpr ProvideProductRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideProductRequestDefaultTypeInternal() {}
  union {
    ProvideProductRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideProductRequestDefaultTypeInternal _ProvideProductRequest_default_instance_;
constexpr ProvideProductResponse::ProvideProductResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_result_(nullptr)
  , product_(nullptr){}
struct ProvideProductResponseDefaultTypeInternal {
  constexpr ProvideProductResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideProductResponseDefaultTypeInternal() {}
  union {
    ProvideProductResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideProductResponseDefaultTypeInternal _ProvideProductResponse_default_instance_;
constexpr ProvideVersionRequest::ProvideVersionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProvideVersionRequestDefaultTypeInternal {
  constexpr ProvideVersionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideVersionRequestDefaultTypeInternal() {}
  union {
    ProvideVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideVersionRequestDefaultTypeInternal _ProvideVersionRequest_default_instance_;
constexpr ProvideVersionResponse::ProvideVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_result_(nullptr)
  , version_(nullptr){}
struct ProvideVersionResponseDefaultTypeInternal {
  constexpr ProvideVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideVersionResponseDefaultTypeInternal() {}
  union {
    ProvideVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideVersionResponseDefaultTypeInternal _ProvideVersionResponse_default_instance_;
constexpr ProvideSpeedFactorRequest::ProvideSpeedFactorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProvideSpeedFactorRequestDefaultTypeInternal {
  constexpr ProvideSpeedFactorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideSpeedFactorRequestDefaultTypeInternal() {}
  union {
    ProvideSpeedFactorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideSpeedFactorRequestDefaultTypeInternal _ProvideSpeedFactorRequest_default_instance_;
constexpr ProvideSpeedFactorResponse::ProvideSpeedFactorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_result_(nullptr)
  , speed_factor_(0){}
struct ProvideSpeedFactorResponseDefaultTypeInternal {
  constexpr ProvideSpeedFactorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProvideSpeedFactorResponseDefaultTypeInternal() {}
  union {
    ProvideSpeedFactorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProvideSpeedFactorResponseDefaultTypeInternal _ProvideSpeedFactorResponse_default_instance_;
constexpr FlightInfo::FlightInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flight_uid_(uint64_t{0u})
  , time_boot_ms_(0u){}
struct FlightInfoDefaultTypeInternal {
  constexpr FlightInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlightInfoDefaultTypeInternal() {}
  union {
    FlightInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlightInfoDefaultTypeInternal _FlightInfo_default_instance_;
constexpr Identification::Identification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hardware_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legacy_uid_(uint64_t{0u}){}
struct IdentificationDefaultTypeInternal {
  constexpr IdentificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentificationDefaultTypeInternal() {}
  union {
    Identification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentificationDefaultTypeInternal _Identification_default_instance_;
constexpr Product::Product(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vendor_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_id_(0)
  , product_id_(0){}
struct ProductDefaultTypeInternal {
  constexpr ProductDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProductDefaultTypeInternal() {}
  union {
    Product _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProductDefaultTypeInternal _Product_default_instance_;
constexpr Version::Version(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flight_sw_git_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_sw_git_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flight_sw_major_(0)
  , flight_sw_minor_(0)
  , flight_sw_patch_(0)
  , flight_sw_vendor_major_(0)
  , flight_sw_vendor_minor_(0)
  , flight_sw_vendor_patch_(0)
  , os_sw_major_(0)
  , os_sw_minor_(0)
  , os_sw_patch_(0){}
struct VersionDefaultTypeInternal {
  constexpr VersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionDefaultTypeInternal _Version_default_instance_;
constexpr InfoResult::InfoResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct InfoResultDefaultTypeInternal {
  constexpr InfoResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoResultDefaultTypeInternal() {}
  union {
    InfoResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoResultDefaultTypeInternal _InfoResult_default_instance_;
}  // namespace info_server
}  // namespace rpc
}  // namespace mavsdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_info_5fserver_2finfo_5fserver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_info_5fserver_2finfo_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_info_5fserver_2finfo_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideFlightInformationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideFlightInformationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideFlightInformationResponse, info_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideFlightInformationResponse, flight_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideIdentificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideIdentificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideIdentificationResponse, info_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideIdentificationResponse, identification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideProductRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideProductResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideProductResponse, info_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideProductResponse, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideVersionResponse, info_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideVersionResponse, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideSpeedFactorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, info_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, speed_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::FlightInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::FlightInfo, time_boot_ms_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::FlightInfo, flight_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Identification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Identification, hardware_uid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Identification, legacy_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Product, vendor_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Product, vendor_name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Product, product_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Product, product_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_major_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_minor_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_patch_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_vendor_major_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_vendor_minor_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_vendor_patch_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, os_sw_major_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, os_sw_minor_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, os_sw_patch_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, flight_sw_git_hash_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::Version, os_sw_git_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::InfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::InfoResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::info_server::InfoResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::info_server::ProvideFlightInformationRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::info_server::ProvideFlightInformationResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::info_server::ProvideIdentificationRequest)},
  { 17, -1, sizeof(::mavsdk::rpc::info_server::ProvideIdentificationResponse)},
  { 24, -1, sizeof(::mavsdk::rpc::info_server::ProvideProductRequest)},
  { 29, -1, sizeof(::mavsdk::rpc::info_server::ProvideProductResponse)},
  { 36, -1, sizeof(::mavsdk::rpc::info_server::ProvideVersionRequest)},
  { 41, -1, sizeof(::mavsdk::rpc::info_server::ProvideVersionResponse)},
  { 48, -1, sizeof(::mavsdk::rpc::info_server::ProvideSpeedFactorRequest)},
  { 53, -1, sizeof(::mavsdk::rpc::info_server::ProvideSpeedFactorResponse)},
  { 60, -1, sizeof(::mavsdk::rpc::info_server::FlightInfo)},
  { 67, -1, sizeof(::mavsdk::rpc::info_server::Identification)},
  { 74, -1, sizeof(::mavsdk::rpc::info_server::Product)},
  { 83, -1, sizeof(::mavsdk::rpc::info_server::Version)},
  { 99, -1, sizeof(::mavsdk::rpc::info_server::InfoResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideFlightInformationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideFlightInformationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideIdentificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideIdentificationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideProductRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideProductResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideSpeedFactorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_ProvideSpeedFactorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_FlightInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_Identification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_Product_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::info_server::_InfoResult_default_instance_),
};

const char descriptor_table_protodef_info_5fserver_2finfo_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035info_server/info_server.proto\022\026mavsdk."
  "rpc.info_server\032\024mavsdk_options.proto\"!\n"
  "\037ProvideFlightInformationRequest\"\224\001\n Pro"
  "videFlightInformationResponse\0227\n\013info_re"
  "sult\030\001 \001(\0132\".mavsdk.rpc.info_server.Info"
  "Result\0227\n\013flight_info\030\002 \001(\0132\".mavsdk.rpc"
  ".info_server.FlightInfo\"\036\n\034ProvideIdenti"
  "ficationRequest\"\230\001\n\035ProvideIdentificatio"
  "nResponse\0227\n\013info_result\030\001 \001(\0132\".mavsdk."
  "rpc.info_server.InfoResult\022>\n\016identifica"
  "tion\030\002 \001(\0132&.mavsdk.rpc.info_server.Iden"
  "tification\"\027\n\025ProvideProductRequest\"\203\001\n\026"
  "ProvideProductResponse\0227\n\013info_result\030\001 "
  "\001(\0132\".mavsdk.rpc.info_server.InfoResult\022"
  "0\n\007product\030\002 \001(\0132\037.mavsdk.rpc.info_serve"
  "r.Product\"\027\n\025ProvideVersionRequest\"\203\001\n\026P"
  "rovideVersionResponse\0227\n\013info_result\030\001 \001"
  "(\0132\".mavsdk.rpc.info_server.InfoResult\0220"
  "\n\007version\030\002 \001(\0132\037.mavsdk.rpc.info_server"
  ".Version\"\033\n\031ProvideSpeedFactorRequest\"k\n"
  "\032ProvideSpeedFactorResponse\0227\n\013info_resu"
  "lt\030\001 \001(\0132\".mavsdk.rpc.info_server.InfoRe"
  "sult\022\024\n\014speed_factor\030\002 \001(\001\"6\n\nFlightInfo"
  "\022\024\n\014time_boot_ms\030\001 \001(\r\022\022\n\nflight_uid\030\002 \001"
  "(\004\":\n\016Identification\022\024\n\014hardware_uid\030\001 \001"
  "(\t\022\022\n\nlegacy_uid\030\002 \001(\004\"[\n\007Product\022\021\n\tven"
  "dor_id\030\001 \001(\005\022\023\n\013vendor_name\030\002 \001(\t\022\022\n\npro"
  "duct_id\030\003 \001(\005\022\024\n\014product_name\030\004 \001(\t\"\247\002\n\007"
  "Version\022\027\n\017flight_sw_major\030\001 \001(\005\022\027\n\017flig"
  "ht_sw_minor\030\002 \001(\005\022\027\n\017flight_sw_patch\030\003 \001"
  "(\005\022\036\n\026flight_sw_vendor_major\030\004 \001(\005\022\036\n\026fl"
  "ight_sw_vendor_minor\030\005 \001(\005\022\036\n\026flight_sw_"
  "vendor_patch\030\006 \001(\005\022\023\n\013os_sw_major\030\007 \001(\005\022"
  "\023\n\013os_sw_minor\030\010 \001(\005\022\023\n\013os_sw_patch\030\t \001("
  "\005\022\032\n\022flight_sw_git_hash\030\n \001(\t\022\026\n\016os_sw_g"
  "it_hash\030\013 \001(\t\"\314\001\n\nInfoResult\0229\n\006result\030\001"
  " \001(\0162).mavsdk.rpc.info_server.InfoResult"
  ".Result\022\022\n\nresult_str\030\002 \001(\t\"o\n\006Result\022\022\n"
  "\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\'\n"
  "#RESULT_INFORMATION_NOT_RECEIVED_YET\020\002\022\024"
  "\n\020RESULT_NO_SYSTEM\020\0032\250\005\n\021InfoServerServi"
  "ce\022\223\001\n\030ProvideFlightInformation\0227.mavsdk"
  ".rpc.info_server.ProvideFlightInformatio"
  "nRequest\0328.mavsdk.rpc.info_server.Provid"
  "eFlightInformationResponse\"\004\200\265\030\001\022\212\001\n\025Pro"
  "videIdentification\0224.mavsdk.rpc.info_ser"
  "ver.ProvideIdentificationRequest\0325.mavsd"
  "k.rpc.info_server.ProvideIdentificationR"
  "esponse\"\004\200\265\030\001\022u\n\016ProvideProduct\022-.mavsdk"
  ".rpc.info_server.ProvideProductRequest\032."
  ".mavsdk.rpc.info_server.ProvideProductRe"
  "sponse\"\004\200\265\030\001\022u\n\016ProvideVersion\022-.mavsdk."
  "rpc.info_server.ProvideVersionRequest\032.."
  "mavsdk.rpc.info_server.ProvideVersionRes"
  "ponse\"\004\200\265\030\001\022\201\001\n\022ProvideSpeedFactor\0221.mav"
  "sdk.rpc.info_server.ProvideSpeedFactorRe"
  "quest\0322.mavsdk.rpc.info_server.ProvideSp"
  "eedFactorResponse\"\004\200\265\030\001B8\n\025io.mavsdk.inf"
  "o_serverB\037ComponentInformationServerProt"
  "ob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_info_5fserver_2finfo_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_info_5fserver_2finfo_5fserver_2eproto = {
  false, false, 2369, descriptor_table_protodef_info_5fserver_2finfo_5fserver_2eproto, "info_server/info_server.proto", 
  &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once, descriptor_table_info_5fserver_2finfo_5fserver_2eproto_deps, 1, 15,
  schemas, file_default_instances, TableStruct_info_5fserver_2finfo_5fserver_2eproto::offsets,
  file_level_metadata_info_5fserver_2finfo_5fserver_2eproto, file_level_enum_descriptors_info_5fserver_2finfo_5fserver_2eproto, file_level_service_descriptors_info_5fserver_2finfo_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter() {
  return &descriptor_table_info_5fserver_2finfo_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_info_5fserver_2finfo_5fserver_2eproto(&descriptor_table_info_5fserver_2finfo_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace info_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InfoResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_5fserver_2finfo_5fserver_2eproto);
  return file_level_enum_descriptors_info_5fserver_2finfo_5fserver_2eproto[0];
}
bool InfoResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InfoResult_Result InfoResult::RESULT_UNKNOWN;
constexpr InfoResult_Result InfoResult::RESULT_SUCCESS;
constexpr InfoResult_Result InfoResult::RESULT_INFORMATION_NOT_RECEIVED_YET;
constexpr InfoResult_Result InfoResult::RESULT_NO_SYSTEM;
constexpr InfoResult_Result InfoResult::Result_MIN;
constexpr InfoResult_Result InfoResult::Result_MAX;
constexpr int InfoResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ProvideFlightInformationRequest::_Internal {
 public:
};

ProvideFlightInformationRequest::ProvideFlightInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
}
ProvideFlightInformationRequest::ProvideFlightInformationRequest(const ProvideFlightInformationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
}

inline void ProvideFlightInformationRequest::SharedCtor() {
}

ProvideFlightInformationRequest::~ProvideFlightInformationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideFlightInformationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProvideFlightInformationRequest::ArenaDtor(void* object) {
  ProvideFlightInformationRequest* _this = reinterpret_cast< ProvideFlightInformationRequest* >(object);
  (void)_this;
}
void ProvideFlightInformationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideFlightInformationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideFlightInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideFlightInformationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideFlightInformationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  return target;
}

size_t ProvideFlightInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideFlightInformationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideFlightInformationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideFlightInformationRequest::GetClassData() const { return &_class_data_; }

void ProvideFlightInformationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideFlightInformationRequest *>(to)->MergeFrom(
      static_cast<const ProvideFlightInformationRequest &>(from));
}


void ProvideFlightInformationRequest::MergeFrom(const ProvideFlightInformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideFlightInformationRequest::CopyFrom(const ProvideFlightInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideFlightInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideFlightInformationRequest::IsInitialized() const {
  return true;
}

void ProvideFlightInformationRequest::InternalSwap(ProvideFlightInformationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideFlightInformationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[0]);
}

// ===================================================================

class ProvideFlightInformationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::info_server::InfoResult& info_result(const ProvideFlightInformationResponse* msg);
  static const ::mavsdk::rpc::info_server::FlightInfo& flight_info(const ProvideFlightInformationResponse* msg);
};

const ::mavsdk::rpc::info_server::InfoResult&
ProvideFlightInformationResponse::_Internal::info_result(const ProvideFlightInformationResponse* msg) {
  return *msg->info_result_;
}
const ::mavsdk::rpc::info_server::FlightInfo&
ProvideFlightInformationResponse::_Internal::flight_info(const ProvideFlightInformationResponse* msg) {
  return *msg->flight_info_;
}
ProvideFlightInformationResponse::ProvideFlightInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
}
ProvideFlightInformationResponse::ProvideFlightInformationResponse(const ProvideFlightInformationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_result()) {
    info_result_ = new ::mavsdk::rpc::info_server::InfoResult(*from.info_result_);
  } else {
    info_result_ = nullptr;
  }
  if (from._internal_has_flight_info()) {
    flight_info_ = new ::mavsdk::rpc::info_server::FlightInfo(*from.flight_info_);
  } else {
    flight_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
}

inline void ProvideFlightInformationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flight_info_) -
    reinterpret_cast<char*>(&info_result_)) + sizeof(flight_info_));
}

ProvideFlightInformationResponse::~ProvideFlightInformationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideFlightInformationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_result_;
  if (this != internal_default_instance()) delete flight_info_;
}

void ProvideFlightInformationResponse::ArenaDtor(void* object) {
  ProvideFlightInformationResponse* _this = reinterpret_cast< ProvideFlightInformationResponse* >(object);
  (void)_this;
}
void ProvideFlightInformationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideFlightInformationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideFlightInformationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && flight_info_ != nullptr) {
    delete flight_info_;
  }
  flight_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideFlightInformationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.info_server.InfoResult info_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.info_server.FlightInfo flight_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flight_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideFlightInformationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info_result(this), target, stream);
  }

  // .mavsdk.rpc.info_server.FlightInfo flight_info = 2;
  if (this->_internal_has_flight_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flight_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  return target;
}

size_t ProvideFlightInformationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_result_);
  }

  // .mavsdk.rpc.info_server.FlightInfo flight_info = 2;
  if (this->_internal_has_flight_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flight_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideFlightInformationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideFlightInformationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideFlightInformationResponse::GetClassData() const { return &_class_data_; }

void ProvideFlightInformationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideFlightInformationResponse *>(to)->MergeFrom(
      static_cast<const ProvideFlightInformationResponse &>(from));
}


void ProvideFlightInformationResponse::MergeFrom(const ProvideFlightInformationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_result()) {
    _internal_mutable_info_result()->::mavsdk::rpc::info_server::InfoResult::MergeFrom(from._internal_info_result());
  }
  if (from._internal_has_flight_info()) {
    _internal_mutable_flight_info()->::mavsdk::rpc::info_server::FlightInfo::MergeFrom(from._internal_flight_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideFlightInformationResponse::CopyFrom(const ProvideFlightInformationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideFlightInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideFlightInformationResponse::IsInitialized() const {
  return true;
}

void ProvideFlightInformationResponse::InternalSwap(ProvideFlightInformationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProvideFlightInformationResponse, flight_info_)
      + sizeof(ProvideFlightInformationResponse::flight_info_)
      - PROTOBUF_FIELD_OFFSET(ProvideFlightInformationResponse, info_result_)>(
          reinterpret_cast<char*>(&info_result_),
          reinterpret_cast<char*>(&other->info_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideFlightInformationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[1]);
}

// ===================================================================

class ProvideIdentificationRequest::_Internal {
 public:
};

ProvideIdentificationRequest::ProvideIdentificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideIdentificationRequest)
}
ProvideIdentificationRequest::ProvideIdentificationRequest(const ProvideIdentificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideIdentificationRequest)
}

inline void ProvideIdentificationRequest::SharedCtor() {
}

ProvideIdentificationRequest::~ProvideIdentificationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideIdentificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProvideIdentificationRequest::ArenaDtor(void* object) {
  ProvideIdentificationRequest* _this = reinterpret_cast< ProvideIdentificationRequest* >(object);
  (void)_this;
}
void ProvideIdentificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideIdentificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideIdentificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideIdentificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideIdentificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  return target;
}

size_t ProvideIdentificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideIdentificationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideIdentificationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideIdentificationRequest::GetClassData() const { return &_class_data_; }

void ProvideIdentificationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideIdentificationRequest *>(to)->MergeFrom(
      static_cast<const ProvideIdentificationRequest &>(from));
}


void ProvideIdentificationRequest::MergeFrom(const ProvideIdentificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideIdentificationRequest::CopyFrom(const ProvideIdentificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideIdentificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideIdentificationRequest::IsInitialized() const {
  return true;
}

void ProvideIdentificationRequest::InternalSwap(ProvideIdentificationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideIdentificationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[2]);
}

// ===================================================================

class ProvideIdentificationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::info_server::InfoResult& info_result(const ProvideIdentificationResponse* msg);
  static const ::mavsdk::rpc::info_server::Identification& identification(const ProvideIdentificationResponse* msg);
};

const ::mavsdk::rpc::info_server::InfoResult&
ProvideIdentificationResponse::_Internal::info_result(const ProvideIdentificationResponse* msg) {
  return *msg->info_result_;
}
const ::mavsdk::rpc::info_server::Identification&
ProvideIdentificationResponse::_Internal::identification(const ProvideIdentificationResponse* msg) {
  return *msg->identification_;
}
ProvideIdentificationResponse::ProvideIdentificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideIdentificationResponse)
}
ProvideIdentificationResponse::ProvideIdentificationResponse(const ProvideIdentificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_result()) {
    info_result_ = new ::mavsdk::rpc::info_server::InfoResult(*from.info_result_);
  } else {
    info_result_ = nullptr;
  }
  if (from._internal_has_identification()) {
    identification_ = new ::mavsdk::rpc::info_server::Identification(*from.identification_);
  } else {
    identification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideIdentificationResponse)
}

inline void ProvideIdentificationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&identification_) -
    reinterpret_cast<char*>(&info_result_)) + sizeof(identification_));
}

ProvideIdentificationResponse::~ProvideIdentificationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideIdentificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_result_;
  if (this != internal_default_instance()) delete identification_;
}

void ProvideIdentificationResponse::ArenaDtor(void* object) {
  ProvideIdentificationResponse* _this = reinterpret_cast< ProvideIdentificationResponse* >(object);
  (void)_this;
}
void ProvideIdentificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideIdentificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideIdentificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && identification_ != nullptr) {
    delete identification_;
  }
  identification_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideIdentificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.info_server.InfoResult info_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.info_server.Identification identification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_identification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideIdentificationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info_result(this), target, stream);
  }

  // .mavsdk.rpc.info_server.Identification identification = 2;
  if (this->_internal_has_identification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::identification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  return target;
}

size_t ProvideIdentificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_result_);
  }

  // .mavsdk.rpc.info_server.Identification identification = 2;
  if (this->_internal_has_identification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identification_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideIdentificationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideIdentificationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideIdentificationResponse::GetClassData() const { return &_class_data_; }

void ProvideIdentificationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideIdentificationResponse *>(to)->MergeFrom(
      static_cast<const ProvideIdentificationResponse &>(from));
}


void ProvideIdentificationResponse::MergeFrom(const ProvideIdentificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_result()) {
    _internal_mutable_info_result()->::mavsdk::rpc::info_server::InfoResult::MergeFrom(from._internal_info_result());
  }
  if (from._internal_has_identification()) {
    _internal_mutable_identification()->::mavsdk::rpc::info_server::Identification::MergeFrom(from._internal_identification());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideIdentificationResponse::CopyFrom(const ProvideIdentificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideIdentificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideIdentificationResponse::IsInitialized() const {
  return true;
}

void ProvideIdentificationResponse::InternalSwap(ProvideIdentificationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProvideIdentificationResponse, identification_)
      + sizeof(ProvideIdentificationResponse::identification_)
      - PROTOBUF_FIELD_OFFSET(ProvideIdentificationResponse, info_result_)>(
          reinterpret_cast<char*>(&info_result_),
          reinterpret_cast<char*>(&other->info_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideIdentificationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[3]);
}

// ===================================================================

class ProvideProductRequest::_Internal {
 public:
};

ProvideProductRequest::ProvideProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideProductRequest)
}
ProvideProductRequest::ProvideProductRequest(const ProvideProductRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideProductRequest)
}

inline void ProvideProductRequest::SharedCtor() {
}

ProvideProductRequest::~ProvideProductRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideProductRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideProductRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProvideProductRequest::ArenaDtor(void* object) {
  ProvideProductRequest* _this = reinterpret_cast< ProvideProductRequest* >(object);
  (void)_this;
}
void ProvideProductRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideProductRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideProductRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideProductRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideProductRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideProductRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideProductRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideProductRequest)
  return target;
}

size_t ProvideProductRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideProductRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideProductRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideProductRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideProductRequest::GetClassData() const { return &_class_data_; }

void ProvideProductRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideProductRequest *>(to)->MergeFrom(
      static_cast<const ProvideProductRequest &>(from));
}


void ProvideProductRequest::MergeFrom(const ProvideProductRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideProductRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideProductRequest::CopyFrom(const ProvideProductRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideProductRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideProductRequest::IsInitialized() const {
  return true;
}

void ProvideProductRequest::InternalSwap(ProvideProductRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideProductRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[4]);
}

// ===================================================================

class ProvideProductResponse::_Internal {
 public:
  static const ::mavsdk::rpc::info_server::InfoResult& info_result(const ProvideProductResponse* msg);
  static const ::mavsdk::rpc::info_server::Product& product(const ProvideProductResponse* msg);
};

const ::mavsdk::rpc::info_server::InfoResult&
ProvideProductResponse::_Internal::info_result(const ProvideProductResponse* msg) {
  return *msg->info_result_;
}
const ::mavsdk::rpc::info_server::Product&
ProvideProductResponse::_Internal::product(const ProvideProductResponse* msg) {
  return *msg->product_;
}
ProvideProductResponse::ProvideProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideProductResponse)
}
ProvideProductResponse::ProvideProductResponse(const ProvideProductResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_result()) {
    info_result_ = new ::mavsdk::rpc::info_server::InfoResult(*from.info_result_);
  } else {
    info_result_ = nullptr;
  }
  if (from._internal_has_product()) {
    product_ = new ::mavsdk::rpc::info_server::Product(*from.product_);
  } else {
    product_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideProductResponse)
}

inline void ProvideProductResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&product_) -
    reinterpret_cast<char*>(&info_result_)) + sizeof(product_));
}

ProvideProductResponse::~ProvideProductResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideProductResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideProductResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_result_;
  if (this != internal_default_instance()) delete product_;
}

void ProvideProductResponse::ArenaDtor(void* object) {
  ProvideProductResponse* _this = reinterpret_cast< ProvideProductResponse* >(object);
  (void)_this;
}
void ProvideProductResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideProductResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideProductResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideProductResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideProductResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.info_server.InfoResult info_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.info_server.Product product = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideProductResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideProductResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info_result(this), target, stream);
  }

  // .mavsdk.rpc.info_server.Product product = 2;
  if (this->_internal_has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::product(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideProductResponse)
  return target;
}

size_t ProvideProductResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideProductResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_result_);
  }

  // .mavsdk.rpc.info_server.Product product = 2;
  if (this->_internal_has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideProductResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideProductResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideProductResponse::GetClassData() const { return &_class_data_; }

void ProvideProductResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideProductResponse *>(to)->MergeFrom(
      static_cast<const ProvideProductResponse &>(from));
}


void ProvideProductResponse::MergeFrom(const ProvideProductResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideProductResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_result()) {
    _internal_mutable_info_result()->::mavsdk::rpc::info_server::InfoResult::MergeFrom(from._internal_info_result());
  }
  if (from._internal_has_product()) {
    _internal_mutable_product()->::mavsdk::rpc::info_server::Product::MergeFrom(from._internal_product());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideProductResponse::CopyFrom(const ProvideProductResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideProductResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideProductResponse::IsInitialized() const {
  return true;
}

void ProvideProductResponse::InternalSwap(ProvideProductResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProvideProductResponse, product_)
      + sizeof(ProvideProductResponse::product_)
      - PROTOBUF_FIELD_OFFSET(ProvideProductResponse, info_result_)>(
          reinterpret_cast<char*>(&info_result_),
          reinterpret_cast<char*>(&other->info_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideProductResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[5]);
}

// ===================================================================

class ProvideVersionRequest::_Internal {
 public:
};

ProvideVersionRequest::ProvideVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideVersionRequest)
}
ProvideVersionRequest::ProvideVersionRequest(const ProvideVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideVersionRequest)
}

inline void ProvideVersionRequest::SharedCtor() {
}

ProvideVersionRequest::~ProvideVersionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideVersionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProvideVersionRequest::ArenaDtor(void* object) {
  ProvideVersionRequest* _this = reinterpret_cast< ProvideVersionRequest* >(object);
  (void)_this;
}
void ProvideVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideVersionRequest)
  return target;
}

size_t ProvideVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideVersionRequest::GetClassData() const { return &_class_data_; }

void ProvideVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideVersionRequest *>(to)->MergeFrom(
      static_cast<const ProvideVersionRequest &>(from));
}


void ProvideVersionRequest::MergeFrom(const ProvideVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideVersionRequest::CopyFrom(const ProvideVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideVersionRequest::IsInitialized() const {
  return true;
}

void ProvideVersionRequest::InternalSwap(ProvideVersionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideVersionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[6]);
}

// ===================================================================

class ProvideVersionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::info_server::InfoResult& info_result(const ProvideVersionResponse* msg);
  static const ::mavsdk::rpc::info_server::Version& version(const ProvideVersionResponse* msg);
};

const ::mavsdk::rpc::info_server::InfoResult&
ProvideVersionResponse::_Internal::info_result(const ProvideVersionResponse* msg) {
  return *msg->info_result_;
}
const ::mavsdk::rpc::info_server::Version&
ProvideVersionResponse::_Internal::version(const ProvideVersionResponse* msg) {
  return *msg->version_;
}
ProvideVersionResponse::ProvideVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideVersionResponse)
}
ProvideVersionResponse::ProvideVersionResponse(const ProvideVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_result()) {
    info_result_ = new ::mavsdk::rpc::info_server::InfoResult(*from.info_result_);
  } else {
    info_result_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::mavsdk::rpc::info_server::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideVersionResponse)
}

inline void ProvideVersionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&info_result_)) + sizeof(version_));
}

ProvideVersionResponse::~ProvideVersionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_result_;
  if (this != internal_default_instance()) delete version_;
}

void ProvideVersionResponse::ArenaDtor(void* object) {
  ProvideVersionResponse* _this = reinterpret_cast< ProvideVersionResponse* >(object);
  (void)_this;
}
void ProvideVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.info_server.InfoResult info_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.info_server.Version version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info_result(this), target, stream);
  }

  // .mavsdk.rpc.info_server.Version version = 2;
  if (this->_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideVersionResponse)
  return target;
}

size_t ProvideVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_result_);
  }

  // .mavsdk.rpc.info_server.Version version = 2;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideVersionResponse::GetClassData() const { return &_class_data_; }

void ProvideVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideVersionResponse *>(to)->MergeFrom(
      static_cast<const ProvideVersionResponse &>(from));
}


void ProvideVersionResponse::MergeFrom(const ProvideVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_result()) {
    _internal_mutable_info_result()->::mavsdk::rpc::info_server::InfoResult::MergeFrom(from._internal_info_result());
  }
  if (from._internal_has_version()) {
    _internal_mutable_version()->::mavsdk::rpc::info_server::Version::MergeFrom(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideVersionResponse::CopyFrom(const ProvideVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideVersionResponse::IsInitialized() const {
  return true;
}

void ProvideVersionResponse::InternalSwap(ProvideVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProvideVersionResponse, version_)
      + sizeof(ProvideVersionResponse::version_)
      - PROTOBUF_FIELD_OFFSET(ProvideVersionResponse, info_result_)>(
          reinterpret_cast<char*>(&info_result_),
          reinterpret_cast<char*>(&other->info_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[7]);
}

// ===================================================================

class ProvideSpeedFactorRequest::_Internal {
 public:
};

ProvideSpeedFactorRequest::ProvideSpeedFactorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
}
ProvideSpeedFactorRequest::ProvideSpeedFactorRequest(const ProvideSpeedFactorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
}

inline void ProvideSpeedFactorRequest::SharedCtor() {
}

ProvideSpeedFactorRequest::~ProvideSpeedFactorRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideSpeedFactorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProvideSpeedFactorRequest::ArenaDtor(void* object) {
  ProvideSpeedFactorRequest* _this = reinterpret_cast< ProvideSpeedFactorRequest* >(object);
  (void)_this;
}
void ProvideSpeedFactorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideSpeedFactorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideSpeedFactorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideSpeedFactorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideSpeedFactorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  return target;
}

size_t ProvideSpeedFactorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideSpeedFactorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideSpeedFactorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideSpeedFactorRequest::GetClassData() const { return &_class_data_; }

void ProvideSpeedFactorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideSpeedFactorRequest *>(to)->MergeFrom(
      static_cast<const ProvideSpeedFactorRequest &>(from));
}


void ProvideSpeedFactorRequest::MergeFrom(const ProvideSpeedFactorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideSpeedFactorRequest::CopyFrom(const ProvideSpeedFactorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideSpeedFactorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideSpeedFactorRequest::IsInitialized() const {
  return true;
}

void ProvideSpeedFactorRequest::InternalSwap(ProvideSpeedFactorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideSpeedFactorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[8]);
}

// ===================================================================

class ProvideSpeedFactorResponse::_Internal {
 public:
  static const ::mavsdk::rpc::info_server::InfoResult& info_result(const ProvideSpeedFactorResponse* msg);
};

const ::mavsdk::rpc::info_server::InfoResult&
ProvideSpeedFactorResponse::_Internal::info_result(const ProvideSpeedFactorResponse* msg) {
  return *msg->info_result_;
}
ProvideSpeedFactorResponse::ProvideSpeedFactorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
}
ProvideSpeedFactorResponse::ProvideSpeedFactorResponse(const ProvideSpeedFactorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_result()) {
    info_result_ = new ::mavsdk::rpc::info_server::InfoResult(*from.info_result_);
  } else {
    info_result_ = nullptr;
  }
  speed_factor_ = from.speed_factor_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
}

inline void ProvideSpeedFactorResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_factor_) -
    reinterpret_cast<char*>(&info_result_)) + sizeof(speed_factor_));
}

ProvideSpeedFactorResponse::~ProvideSpeedFactorResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProvideSpeedFactorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_result_;
}

void ProvideSpeedFactorResponse::ArenaDtor(void* object) {
  ProvideSpeedFactorResponse* _this = reinterpret_cast< ProvideSpeedFactorResponse* >(object);
  (void)_this;
}
void ProvideSpeedFactorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProvideSpeedFactorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideSpeedFactorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_result_ != nullptr) {
    delete info_result_;
  }
  info_result_ = nullptr;
  speed_factor_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideSpeedFactorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.info_server.InfoResult info_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProvideSpeedFactorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info_result(this), target, stream);
  }

  // double speed_factor = 2;
  if (!(this->_internal_speed_factor() <= 0 && this->_internal_speed_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  return target;
}

size_t ProvideSpeedFactorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult info_result = 1;
  if (this->_internal_has_info_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_result_);
  }

  // double speed_factor = 2;
  if (!(this->_internal_speed_factor() <= 0 && this->_internal_speed_factor() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideSpeedFactorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideSpeedFactorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideSpeedFactorResponse::GetClassData() const { return &_class_data_; }

void ProvideSpeedFactorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProvideSpeedFactorResponse *>(to)->MergeFrom(
      static_cast<const ProvideSpeedFactorResponse &>(from));
}


void ProvideSpeedFactorResponse::MergeFrom(const ProvideSpeedFactorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_result()) {
    _internal_mutable_info_result()->::mavsdk::rpc::info_server::InfoResult::MergeFrom(from._internal_info_result());
  }
  if (!(from._internal_speed_factor() <= 0 && from._internal_speed_factor() >= 0)) {
    _internal_set_speed_factor(from._internal_speed_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideSpeedFactorResponse::CopyFrom(const ProvideSpeedFactorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.ProvideSpeedFactorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideSpeedFactorResponse::IsInitialized() const {
  return true;
}

void ProvideSpeedFactorResponse::InternalSwap(ProvideSpeedFactorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProvideSpeedFactorResponse, speed_factor_)
      + sizeof(ProvideSpeedFactorResponse::speed_factor_)
      - PROTOBUF_FIELD_OFFSET(ProvideSpeedFactorResponse, info_result_)>(
          reinterpret_cast<char*>(&info_result_),
          reinterpret_cast<char*>(&other->info_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideSpeedFactorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[9]);
}

// ===================================================================

class FlightInfo::_Internal {
 public:
};

FlightInfo::FlightInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.FlightInfo)
}
FlightInfo::FlightInfo(const FlightInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flight_uid_, &from.flight_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_boot_ms_) -
    reinterpret_cast<char*>(&flight_uid_)) + sizeof(time_boot_ms_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.FlightInfo)
}

inline void FlightInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flight_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_boot_ms_) -
    reinterpret_cast<char*>(&flight_uid_)) + sizeof(time_boot_ms_));
}

FlightInfo::~FlightInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.FlightInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlightInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlightInfo::ArenaDtor(void* object) {
  FlightInfo* _this = reinterpret_cast< FlightInfo* >(object);
  (void)_this;
}
void FlightInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlightInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlightInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.FlightInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flight_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_boot_ms_) -
      reinterpret_cast<char*>(&flight_uid_)) + sizeof(time_boot_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time_boot_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_boot_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flight_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flight_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlightInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.FlightInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time_boot_ms = 1;
  if (this->_internal_time_boot_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_boot_ms(), target);
  }

  // uint64 flight_uid = 2;
  if (this->_internal_flight_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flight_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.FlightInfo)
  return target;
}

size_t FlightInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.FlightInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 flight_uid = 2;
  if (this->_internal_flight_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flight_uid());
  }

  // uint32 time_boot_ms = 1;
  if (this->_internal_time_boot_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_boot_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlightInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightInfo::GetClassData() const { return &_class_data_; }

void FlightInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlightInfo *>(to)->MergeFrom(
      static_cast<const FlightInfo &>(from));
}


void FlightInfo::MergeFrom(const FlightInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.FlightInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flight_uid() != 0) {
    _internal_set_flight_uid(from._internal_flight_uid());
  }
  if (from._internal_time_boot_ms() != 0) {
    _internal_set_time_boot_ms(from._internal_time_boot_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightInfo::CopyFrom(const FlightInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.FlightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightInfo::IsInitialized() const {
  return true;
}

void FlightInfo::InternalSwap(FlightInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightInfo, time_boot_ms_)
      + sizeof(FlightInfo::time_boot_ms_)
      - PROTOBUF_FIELD_OFFSET(FlightInfo, flight_uid_)>(
          reinterpret_cast<char*>(&flight_uid_),
          reinterpret_cast<char*>(&other->flight_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[10]);
}

// ===================================================================

class Identification::_Internal {
 public:
};

Identification::Identification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.Identification)
}
Identification::Identification(const Identification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hardware_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hardware_uid().empty()) {
    hardware_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hardware_uid(), 
      GetArenaForAllocation());
  }
  legacy_uid_ = from.legacy_uid_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.Identification)
}

inline void Identification::SharedCtor() {
hardware_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
legacy_uid_ = uint64_t{0u};
}

Identification::~Identification() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.Identification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hardware_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Identification::ArenaDtor(void* object) {
  Identification* _this = reinterpret_cast< Identification* >(object);
  (void)_this;
}
void Identification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identification::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.Identification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hardware_uid_.ClearToEmpty();
  legacy_uid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hardware_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hardware_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.info_server.Identification.hardware_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 legacy_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          legacy_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.Identification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hardware_uid = 1;
  if (!this->_internal_hardware_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_uid().data(), static_cast<int>(this->_internal_hardware_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.info_server.Identification.hardware_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hardware_uid(), target);
  }

  // uint64 legacy_uid = 2;
  if (this->_internal_legacy_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_legacy_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.Identification)
  return target;
}

size_t Identification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.Identification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hardware_uid = 1;
  if (!this->_internal_hardware_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_uid());
  }

  // uint64 legacy_uid = 2;
  if (this->_internal_legacy_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_legacy_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Identification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Identification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Identification::GetClassData() const { return &_class_data_; }

void Identification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Identification *>(to)->MergeFrom(
      static_cast<const Identification &>(from));
}


void Identification::MergeFrom(const Identification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.Identification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hardware_uid().empty()) {
    _internal_set_hardware_uid(from._internal_hardware_uid());
  }
  if (from._internal_legacy_uid() != 0) {
    _internal_set_legacy_uid(from._internal_legacy_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Identification::CopyFrom(const Identification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.Identification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identification::IsInitialized() const {
  return true;
}

void Identification::InternalSwap(Identification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hardware_uid_, GetArenaForAllocation(),
      &other->hardware_uid_, other->GetArenaForAllocation()
  );
  swap(legacy_uid_, other->legacy_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[11]);
}

// ===================================================================

class Product::_Internal {
 public:
};

Product::Product(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.Product)
}
Product::Product(const Product& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_name().empty()) {
    vendor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_name(), 
      GetArenaForAllocation());
  }
  product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_name().empty()) {
    product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&vendor_id_, &from.vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.Product)
}

inline void Product::SharedCtor() {
vendor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vendor_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.Product)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Product::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vendor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Product::ArenaDtor(void* object) {
  Product* _this = reinterpret_cast< Product* >(object);
  (void)_this;
}
void Product::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Product::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.Product)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendor_name_.ClearToEmpty();
  product_name_.ClearToEmpty();
  ::memset(&vendor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Product::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vendor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.info_server.Product.vendor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 product_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_product_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.info_server.Product.product_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Product::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.Product)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vendor_id = 1;
  if (this->_internal_vendor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vendor_id(), target);
  }

  // string vendor_name = 2;
  if (!this->_internal_vendor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_name().data(), static_cast<int>(this->_internal_vendor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.info_server.Product.vendor_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_name(), target);
  }

  // int32 product_id = 3;
  if (this->_internal_product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_product_id(), target);
  }

  // string product_name = 4;
  if (!this->_internal_product_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_name().data(), static_cast<int>(this->_internal_product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.info_server.Product.product_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_product_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.Product)
  return target;
}

size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.Product)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_name = 2;
  if (!this->_internal_vendor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_name());
  }

  // string product_name = 4;
  if (!this->_internal_product_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_name());
  }

  // int32 vendor_id = 1;
  if (this->_internal_vendor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vendor_id());
  }

  // int32 product_id = 3;
  if (this->_internal_product_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_product_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Product::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Product::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Product::GetClassData() const { return &_class_data_; }

void Product::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Product *>(to)->MergeFrom(
      static_cast<const Product &>(from));
}


void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.Product)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor_name().empty()) {
    _internal_set_vendor_name(from._internal_vendor_name());
  }
  if (!from._internal_product_name().empty()) {
    _internal_set_product_name(from._internal_product_name());
  }
  if (from._internal_vendor_id() != 0) {
    _internal_set_vendor_id(from._internal_vendor_id());
  }
  if (from._internal_product_id() != 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::InternalSwap(Product* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vendor_name_, GetArenaForAllocation(),
      &other->vendor_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_name_, GetArenaForAllocation(),
      &other->product_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Product, product_id_)
      + sizeof(Product::product_id_)
      - PROTOBUF_FIELD_OFFSET(Product, vendor_id_)>(
          reinterpret_cast<char*>(&vendor_id_),
          reinterpret_cast<char*>(&other->vendor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Product::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[12]);
}

// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flight_sw_git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flight_sw_git_hash().empty()) {
    flight_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flight_sw_git_hash(), 
      GetArenaForAllocation());
  }
  os_sw_git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os_sw_git_hash().empty()) {
    os_sw_git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os_sw_git_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&flight_sw_major_, &from.flight_sw_major_,
    static_cast<size_t>(reinterpret_cast<char*>(&os_sw_patch_) -
    reinterpret_cast<char*>(&flight_sw_major_)) + sizeof(os_sw_patch_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.Version)
}

inline void Version::SharedCtor() {
flight_sw_git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
os_sw_git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flight_sw_major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&os_sw_patch_) -
    reinterpret_cast<char*>(&flight_sw_major_)) + sizeof(os_sw_patch_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.Version)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flight_sw_git_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_sw_git_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flight_sw_git_hash_.ClearToEmpty();
  os_sw_git_hash_.ClearToEmpty();
  ::memset(&flight_sw_major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&os_sw_patch_) -
      reinterpret_cast<char*>(&flight_sw_major_)) + sizeof(os_sw_patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 flight_sw_major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flight_sw_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flight_sw_minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flight_sw_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flight_sw_patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flight_sw_patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flight_sw_vendor_major = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flight_sw_vendor_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flight_sw_vendor_minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flight_sw_vendor_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flight_sw_vendor_patch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flight_sw_vendor_patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 os_sw_major = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          os_sw_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 os_sw_minor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          os_sw_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 os_sw_patch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          os_sw_patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flight_sw_git_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_flight_sw_git_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.info_server.Version.flight_sw_git_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string os_sw_git_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_os_sw_git_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.info_server.Version.os_sw_git_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flight_sw_major = 1;
  if (this->_internal_flight_sw_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flight_sw_major(), target);
  }

  // int32 flight_sw_minor = 2;
  if (this->_internal_flight_sw_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flight_sw_minor(), target);
  }

  // int32 flight_sw_patch = 3;
  if (this->_internal_flight_sw_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flight_sw_patch(), target);
  }

  // int32 flight_sw_vendor_major = 4;
  if (this->_internal_flight_sw_vendor_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flight_sw_vendor_major(), target);
  }

  // int32 flight_sw_vendor_minor = 5;
  if (this->_internal_flight_sw_vendor_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_flight_sw_vendor_minor(), target);
  }

  // int32 flight_sw_vendor_patch = 6;
  if (this->_internal_flight_sw_vendor_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_flight_sw_vendor_patch(), target);
  }

  // int32 os_sw_major = 7;
  if (this->_internal_os_sw_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_os_sw_major(), target);
  }

  // int32 os_sw_minor = 8;
  if (this->_internal_os_sw_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_os_sw_minor(), target);
  }

  // int32 os_sw_patch = 9;
  if (this->_internal_os_sw_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_os_sw_patch(), target);
  }

  // string flight_sw_git_hash = 10;
  if (!this->_internal_flight_sw_git_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flight_sw_git_hash().data(), static_cast<int>(this->_internal_flight_sw_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.info_server.Version.flight_sw_git_hash");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_flight_sw_git_hash(), target);
  }

  // string os_sw_git_hash = 11;
  if (!this->_internal_os_sw_git_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_sw_git_hash().data(), static_cast<int>(this->_internal_os_sw_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.info_server.Version.os_sw_git_hash");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_os_sw_git_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flight_sw_git_hash = 10;
  if (!this->_internal_flight_sw_git_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flight_sw_git_hash());
  }

  // string os_sw_git_hash = 11;
  if (!this->_internal_os_sw_git_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_sw_git_hash());
  }

  // int32 flight_sw_major = 1;
  if (this->_internal_flight_sw_major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flight_sw_major());
  }

  // int32 flight_sw_minor = 2;
  if (this->_internal_flight_sw_minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flight_sw_minor());
  }

  // int32 flight_sw_patch = 3;
  if (this->_internal_flight_sw_patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flight_sw_patch());
  }

  // int32 flight_sw_vendor_major = 4;
  if (this->_internal_flight_sw_vendor_major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flight_sw_vendor_major());
  }

  // int32 flight_sw_vendor_minor = 5;
  if (this->_internal_flight_sw_vendor_minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flight_sw_vendor_minor());
  }

  // int32 flight_sw_vendor_patch = 6;
  if (this->_internal_flight_sw_vendor_patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flight_sw_vendor_patch());
  }

  // int32 os_sw_major = 7;
  if (this->_internal_os_sw_major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_os_sw_major());
  }

  // int32 os_sw_minor = 8;
  if (this->_internal_os_sw_minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_os_sw_minor());
  }

  // int32 os_sw_patch = 9;
  if (this->_internal_os_sw_patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_os_sw_patch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }

void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Version *>(to)->MergeFrom(
      static_cast<const Version &>(from));
}


void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.Version)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flight_sw_git_hash().empty()) {
    _internal_set_flight_sw_git_hash(from._internal_flight_sw_git_hash());
  }
  if (!from._internal_os_sw_git_hash().empty()) {
    _internal_set_os_sw_git_hash(from._internal_os_sw_git_hash());
  }
  if (from._internal_flight_sw_major() != 0) {
    _internal_set_flight_sw_major(from._internal_flight_sw_major());
  }
  if (from._internal_flight_sw_minor() != 0) {
    _internal_set_flight_sw_minor(from._internal_flight_sw_minor());
  }
  if (from._internal_flight_sw_patch() != 0) {
    _internal_set_flight_sw_patch(from._internal_flight_sw_patch());
  }
  if (from._internal_flight_sw_vendor_major() != 0) {
    _internal_set_flight_sw_vendor_major(from._internal_flight_sw_vendor_major());
  }
  if (from._internal_flight_sw_vendor_minor() != 0) {
    _internal_set_flight_sw_vendor_minor(from._internal_flight_sw_vendor_minor());
  }
  if (from._internal_flight_sw_vendor_patch() != 0) {
    _internal_set_flight_sw_vendor_patch(from._internal_flight_sw_vendor_patch());
  }
  if (from._internal_os_sw_major() != 0) {
    _internal_set_os_sw_major(from._internal_os_sw_major());
  }
  if (from._internal_os_sw_minor() != 0) {
    _internal_set_os_sw_minor(from._internal_os_sw_minor());
  }
  if (from._internal_os_sw_patch() != 0) {
    _internal_set_os_sw_patch(from._internal_os_sw_patch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flight_sw_git_hash_, GetArenaForAllocation(),
      &other->flight_sw_git_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_sw_git_hash_, GetArenaForAllocation(),
      &other->os_sw_git_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, os_sw_patch_)
      + sizeof(Version::os_sw_patch_)
      - PROTOBUF_FIELD_OFFSET(Version, flight_sw_major_)>(
          reinterpret_cast<char*>(&flight_sw_major_),
          reinterpret_cast<char*>(&other->flight_sw_major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[13]);
}

// ===================================================================

class InfoResult::_Internal {
 public:
};

InfoResult::InfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.info_server.InfoResult)
}
InfoResult::InfoResult(const InfoResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_str(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.info_server.InfoResult)
}

inline void InfoResult::SharedCtor() {
result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

InfoResult::~InfoResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.info_server.InfoResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InfoResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfoResult::ArenaDtor(void* object) {
  InfoResult* _this = reinterpret_cast< InfoResult* >(object);
  (void)_this;
}
void InfoResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.info_server.InfoResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.info_server.InfoResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::info_server::InfoResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.info_server.InfoResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.info_server.InfoResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.info_server.InfoResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.info_server.InfoResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.info_server.InfoResult)
  return target;
}

size_t InfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.info_server.InfoResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.info_server.InfoResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InfoResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoResult::GetClassData() const { return &_class_data_; }

void InfoResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InfoResult *>(to)->MergeFrom(
      static_cast<const InfoResult &>(from));
}


void InfoResult::MergeFrom(const InfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.info_server.InfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoResult::CopyFrom(const InfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.info_server.InfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoResult::IsInitialized() const {
  return true;
}

void InfoResult::InternalSwap(InfoResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_str_, GetArenaForAllocation(),
      &other->result_str_, other->GetArenaForAllocation()
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_getter, &descriptor_table_info_5fserver_2finfo_5fserver_2eproto_once,
      file_level_metadata_info_5fserver_2finfo_5fserver_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace info_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideFlightInformationRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideFlightInformationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideFlightInformationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideFlightInformationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideFlightInformationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideIdentificationRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideIdentificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideIdentificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideIdentificationResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideIdentificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideIdentificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideProductRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideProductRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideProductRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideProductResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideProductResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideProductResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideVersionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideVersionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::FlightInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::FlightInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::FlightInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::Identification* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::Identification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::Identification >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::Product* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::Product >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::Product >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::Version* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::info_server::InfoResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::info_server::InfoResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::info_server::InfoResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
