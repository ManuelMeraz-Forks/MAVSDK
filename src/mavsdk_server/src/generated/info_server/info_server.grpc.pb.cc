// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: info_server/info_server.proto

#include "info_server/info_server.pb.h"
#include "info_server/info_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace info_server {

static const char* InfoServerService_method_names[] = {
  "/mavsdk.rpc.info_server.InfoServerService/ProvideFlightInformation",
  "/mavsdk.rpc.info_server.InfoServerService/ProvideIdentification",
  "/mavsdk.rpc.info_server.InfoServerService/ProvideProduct",
  "/mavsdk.rpc.info_server.InfoServerService/ProvideVersion",
  "/mavsdk.rpc.info_server.InfoServerService/ProvideSpeedFactor",
};

std::unique_ptr< InfoServerService::Stub> InfoServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InfoServerService::Stub> stub(new InfoServerService::Stub(channel, options));
  return stub;
}

InfoServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProvideFlightInformation_(InfoServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProvideIdentification_(InfoServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProvideProduct_(InfoServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProvideVersion_(InfoServerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProvideSpeedFactor_(InfoServerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InfoServerService::Stub::ProvideFlightInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest& request, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideFlightInformationRequest, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideFlightInformation_, context, request, response);
}

void InfoServerService::Stub::async::ProvideFlightInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest* request, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideFlightInformationRequest, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideFlightInformation_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideFlightInformation(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest* request, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideFlightInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideFlightInformationResponse>* InfoServerService::Stub::PrepareAsyncProvideFlightInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideFlightInformationResponse, ::mavsdk::rpc::info_server::ProvideFlightInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideFlightInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideFlightInformationResponse>* InfoServerService::Stub::AsyncProvideFlightInformationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideFlightInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfoServerService::Stub::ProvideIdentification(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideIdentificationRequest& request, ::mavsdk::rpc::info_server::ProvideIdentificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideIdentificationRequest, ::mavsdk::rpc::info_server::ProvideIdentificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideIdentification_, context, request, response);
}

void InfoServerService::Stub::async::ProvideIdentification(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideIdentificationRequest* request, ::mavsdk::rpc::info_server::ProvideIdentificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideIdentificationRequest, ::mavsdk::rpc::info_server::ProvideIdentificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideIdentification_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideIdentification(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideIdentificationRequest* request, ::mavsdk::rpc::info_server::ProvideIdentificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideIdentification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideIdentificationResponse>* InfoServerService::Stub::PrepareAsyncProvideIdentificationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideIdentificationResponse, ::mavsdk::rpc::info_server::ProvideIdentificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideIdentification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideIdentificationResponse>* InfoServerService::Stub::AsyncProvideIdentificationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideIdentificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfoServerService::Stub::ProvideProduct(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProductRequest& request, ::mavsdk::rpc::info_server::ProvideProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideProductRequest, ::mavsdk::rpc::info_server::ProvideProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideProduct_, context, request, response);
}

void InfoServerService::Stub::async::ProvideProduct(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProductRequest* request, ::mavsdk::rpc::info_server::ProvideProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideProductRequest, ::mavsdk::rpc::info_server::ProvideProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideProduct_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideProduct(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProductRequest* request, ::mavsdk::rpc::info_server::ProvideProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideProductResponse>* InfoServerService::Stub::PrepareAsyncProvideProductRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProductRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideProductResponse, ::mavsdk::rpc::info_server::ProvideProductRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideProductResponse>* InfoServerService::Stub::AsyncProvideProductRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProductRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfoServerService::Stub::ProvideVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideVersionRequest& request, ::mavsdk::rpc::info_server::ProvideVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideVersionRequest, ::mavsdk::rpc::info_server::ProvideVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideVersion_, context, request, response);
}

void InfoServerService::Stub::async::ProvideVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideVersionRequest* request, ::mavsdk::rpc::info_server::ProvideVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideVersionRequest, ::mavsdk::rpc::info_server::ProvideVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideVersion_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideVersionRequest* request, ::mavsdk::rpc::info_server::ProvideVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideVersionResponse>* InfoServerService::Stub::PrepareAsyncProvideVersionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideVersionResponse, ::mavsdk::rpc::info_server::ProvideVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideVersionResponse>* InfoServerService::Stub::AsyncProvideVersionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfoServerService::Stub::ProvideSpeedFactor(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest& request, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideSpeedFactor_, context, request, response);
}

void InfoServerService::Stub::async::ProvideSpeedFactor(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest* request, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideSpeedFactor_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideSpeedFactor(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest* request, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideSpeedFactor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse>* InfoServerService::Stub::PrepareAsyncProvideSpeedFactorRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideSpeedFactor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse>* InfoServerService::Stub::AsyncProvideSpeedFactorRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideSpeedFactorRaw(context, request, cq);
  result->StartCall();
  return result;
}

InfoServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideFlightInformationRequest, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest* req,
             ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* resp) {
               return service->ProvideFlightInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideIdentificationRequest, ::mavsdk::rpc::info_server::ProvideIdentificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideIdentificationRequest* req,
             ::mavsdk::rpc::info_server::ProvideIdentificationResponse* resp) {
               return service->ProvideIdentification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideProductRequest, ::mavsdk::rpc::info_server::ProvideProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideProductRequest* req,
             ::mavsdk::rpc::info_server::ProvideProductResponse* resp) {
               return service->ProvideProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideVersionRequest, ::mavsdk::rpc::info_server::ProvideVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideVersionRequest* req,
             ::mavsdk::rpc::info_server::ProvideVersionResponse* resp) {
               return service->ProvideVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest* req,
             ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* resp) {
               return service->ProvideSpeedFactor(ctx, req, resp);
             }, this)));
}

InfoServerService::Service::~Service() {
}

::grpc::Status InfoServerService::Service::ProvideFlightInformation(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideFlightInformationRequest* request, ::mavsdk::rpc::info_server::ProvideFlightInformationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfoServerService::Service::ProvideIdentification(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideIdentificationRequest* request, ::mavsdk::rpc::info_server::ProvideIdentificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfoServerService::Service::ProvideProduct(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideProductRequest* request, ::mavsdk::rpc::info_server::ProvideProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfoServerService::Service::ProvideVersion(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideVersionRequest* request, ::mavsdk::rpc::info_server::ProvideVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfoServerService::Service::ProvideSpeedFactor(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideSpeedFactorRequest* request, ::mavsdk::rpc::info_server::ProvideSpeedFactorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace info_server

