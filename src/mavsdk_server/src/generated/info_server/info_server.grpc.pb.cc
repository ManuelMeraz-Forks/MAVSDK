// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: info_server/info_server.proto

#include "info_server/info_server.pb.h"
#include "info_server/info_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace info_server {

static const char* InfoServerService_method_names[] = {
  "/mavsdk.rpc.info_server.InfoServerService/ProvideAutopilotVersion",
  "/mavsdk.rpc.info_server.InfoServerService/ProvideProtocolVersion",
};

std::unique_ptr< InfoServerService::Stub> InfoServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InfoServerService::Stub> stub(new InfoServerService::Stub(channel, options));
  return stub;
}

InfoServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProvideAutopilotVersion_(InfoServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProvideProtocolVersion_(InfoServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InfoServerService::Stub::ProvideAutopilotVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest& request, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideAutopilotVersion_, context, request, response);
}

void InfoServerService::Stub::async::ProvideAutopilotVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest* request, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideAutopilotVersion_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideAutopilotVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest* request, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideAutopilotVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse>* InfoServerService::Stub::PrepareAsyncProvideAutopilotVersionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse, ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideAutopilotVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse>* InfoServerService::Stub::AsyncProvideAutopilotVersionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideAutopilotVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfoServerService::Stub::ProvideProtocolVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest& request, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideProtocolVersion_, context, request, response);
}

void InfoServerService::Stub::async::ProvideProtocolVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest* request, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideProtocolVersion_, context, request, response, std::move(f));
}

void InfoServerService::Stub::async::ProvideProtocolVersion(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest* request, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideProtocolVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse>* InfoServerService::Stub::PrepareAsyncProvideProtocolVersionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse, ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideProtocolVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse>* InfoServerService::Stub::AsyncProvideProtocolVersionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideProtocolVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

InfoServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest* req,
             ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse* resp) {
               return service->ProvideAutopilotVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfoServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfoServerService::Service, ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfoServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest* req,
             ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse* resp) {
               return service->ProvideProtocolVersion(ctx, req, resp);
             }, this)));
}

InfoServerService::Service::~Service() {
}

::grpc::Status InfoServerService::Service::ProvideAutopilotVersion(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideAutopilotVersionRequest* request, ::mavsdk::rpc::info_server::ProvideAutopilotVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfoServerService::Service::ProvideProtocolVersion(::grpc::ServerContext* context, const ::mavsdk::rpc::info_server::ProvideProtocolVersionRequest* request, ::mavsdk::rpc::info_server::ProvideProtocolVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace info_server

