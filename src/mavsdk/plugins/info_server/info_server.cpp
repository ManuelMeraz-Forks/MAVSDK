// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/info_server/info_server.proto)

#include <iomanip>

#include "info_server_impl.h"
#include "plugins/info_server/info_server.h"

namespace mavsdk {

using ProtocolVersion = InfoServer::ProtocolVersion;
using AutopilotVersion = InfoServer::AutopilotVersion;
using ComponentInformation = InfoServer::ComponentInformation;

InfoServer::InfoServer(System& system) :
    PluginBase(),
    _impl{std::make_unique<InfoServerImpl>(system)}
{}

InfoServer::InfoServer(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<InfoServerImpl>(system)}
{}

InfoServer::~InfoServer() {}

std::pair<InfoServer::Result, InfoServer::AutopilotVersion>
InfoServer::provide_autopilot_version() const
{
    return _impl->provide_autopilot_version();
}

std::pair<InfoServer::Result, InfoServer::ProtocolVersion>
InfoServer::provide_protocol_version() const
{
    return _impl->provide_protocol_version();
}

std::pair<InfoServer::Result, InfoServer::ComponentInformation>
InfoServer::provide_component_information() const
{
    return _impl->provide_component_information();
}

InfoServer::Result InfoServer::set_autopilot_version(AutopilotVersion autopilot_version_info) const
{
    return _impl->set_autopilot_version(autopilot_version_info);
}

InfoServer::Result InfoServer::set_protocol_version(ProtocolVersion protocol_version_info) const
{
    return _impl->set_protocol_version(protocol_version_info);
}

InfoServer::Result
InfoServer::set_component_information(ComponentInformation component_information_info) const
{
    return _impl->set_component_information(component_information_info);
}

bool operator==(const InfoServer::ProtocolVersion& lhs, const InfoServer::ProtocolVersion& rhs)
{
    return (rhs.version == lhs.version) && (rhs.min_version == lhs.min_version) &&
           (rhs.max_version == lhs.max_version) &&
           (rhs.spec_version_hash == lhs.spec_version_hash) &&
           (rhs.library_version_hash == lhs.library_version_hash);
}

std::ostream& operator<<(std::ostream& str, InfoServer::ProtocolVersion const& protocol_version)
{
    str << std::setprecision(15);
    str << "protocol_version:" << '\n' << "{\n";
    str << "    version: " << protocol_version.version << '\n';
    str << "    min_version: " << protocol_version.min_version << '\n';
    str << "    max_version: " << protocol_version.max_version << '\n';
    str << "    spec_version_hash: " << protocol_version.spec_version_hash << '\n';
    str << "    library_version_hash: " << protocol_version.library_version_hash << '\n';
    str << '}';
    return str;
}

bool operator==(const InfoServer::AutopilotVersion& lhs, const InfoServer::AutopilotVersion& rhs)
{
    return (rhs.capabilities == lhs.capabilities) &&
           (rhs.flight_sw_version == lhs.flight_sw_version) &&
           (rhs.middleware_sw_version == lhs.middleware_sw_version) &&
           (rhs.os_sw_version == lhs.os_sw_version) && (rhs.board_version == lhs.board_version) &&
           (rhs.flight_custom_version == lhs.flight_custom_version) &&
           (rhs.middleware_custom_version == lhs.middleware_custom_version) &&
           (rhs.os_custom_version == lhs.os_custom_version) && (rhs.vendor_id == lhs.vendor_id) &&
           (rhs.product_id == lhs.product_id) && (rhs.uid == lhs.uid) && (rhs.uid2 == lhs.uid2);
}

std::ostream& operator<<(std::ostream& str, InfoServer::AutopilotVersion const& autopilot_version)
{
    str << std::setprecision(15);
    str << "autopilot_version:" << '\n' << "{\n";
    str << "    capabilities: " << autopilot_version.capabilities << '\n';
    str << "    flight_sw_version: " << autopilot_version.flight_sw_version << '\n';
    str << "    middleware_sw_version: " << autopilot_version.middleware_sw_version << '\n';
    str << "    os_sw_version: " << autopilot_version.os_sw_version << '\n';
    str << "    board_version: " << autopilot_version.board_version << '\n';
    str << "    flight_custom_version: " << autopilot_version.flight_custom_version << '\n';
    str << "    middleware_custom_version: " << autopilot_version.middleware_custom_version << '\n';
    str << "    os_custom_version: " << autopilot_version.os_custom_version << '\n';
    str << "    vendor_id: " << autopilot_version.vendor_id << '\n';
    str << "    product_id: " << autopilot_version.product_id << '\n';
    str << "    uid: " << autopilot_version.uid << '\n';
    str << "    uid2: " << autopilot_version.uid2 << '\n';
    str << '}';
    return str;
}

bool operator==(
    const InfoServer::ComponentInformation& lhs, const InfoServer::ComponentInformation& rhs)
{
    return (rhs.time_boot_ms == lhs.time_boot_ms) &&
           (rhs.general_metadata_file_crc == lhs.general_metadata_file_crc) &&
           (rhs.general_metadata_uri == lhs.general_metadata_uri) &&
           (rhs.peripherals_metadata_file_crc == lhs.peripherals_metadata_file_crc) &&
           (rhs.peripherals_metadata_uri == lhs.peripherals_metadata_uri);
}

std::ostream&
operator<<(std::ostream& str, InfoServer::ComponentInformation const& component_information)
{
    str << std::setprecision(15);
    str << "component_information:" << '\n' << "{\n";
    str << "    time_boot_ms: " << component_information.time_boot_ms << '\n';
    str << "    general_metadata_file_crc: " << component_information.general_metadata_file_crc
        << '\n';
    str << "    general_metadata_uri: " << component_information.general_metadata_uri << '\n';
    str << "    peripherals_metadata_file_crc: "
        << component_information.peripherals_metadata_file_crc << '\n';
    str << "    peripherals_metadata_uri: " << component_information.peripherals_metadata_uri
        << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, InfoServer::Result const& result)
{
    switch (result) {
        case InfoServer::Result::Unknown:
            return str << "Unknown";
        case InfoServer::Result::Success:
            return str << "Success";
        case InfoServer::Result::InformationNotReceivedYet:
            return str << "Information Not Received Yet";
        case InfoServer::Result::NoSystem:
            return str << "No System";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk