// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/info_server/info_server.proto)

#include <iomanip>

#include "info_server_impl.h"
#include "plugins/info_server/info_server.h"

namespace mavsdk {

using ProtocolVersion = InfoServer::ProtocolVersion;
using AutopilotVersion = InfoServer::AutopilotVersion;

InfoServer::InfoServer(System& system) :
    PluginBase(),
    _impl{std::make_unique<InfoServerImpl>(system)}
{}

InfoServer::InfoServer(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<InfoServerImpl>(system)}
{}

InfoServer::~InfoServer() {}

std::pair<InfoServer::Result, InfoServer::AutopilotVersion>
InfoServer::provide_autopilot_version() const
{
    return _impl->provide_autopilot_version();
}

std::pair<InfoServer::Result, InfoServer::ProtocolVersion>
InfoServer::provide_protocol_version() const
{
    return _impl->provide_protocol_version();
}

bool operator==(const InfoServer::ProtocolVersion& lhs, const InfoServer::ProtocolVersion& rhs)
{
    return (rhs.version == lhs.version) && (rhs.min_version == lhs.min_version) &&
           (rhs.max_version == lhs.max_version) &&
           (rhs.spec_version_hash == lhs.spec_version_hash) &&
           (rhs.library_version_hash == lhs.library_version_hash);
}

std::ostream& operator<<(std::ostream& str, InfoServer::ProtocolVersion const& protocol_version)
{
    str << std::setprecision(15);
    str << "protocol_version:" << '\n' << "{\n";
    str << "    version: " << protocol_version.version << '\n';
    str << "    min_version: " << protocol_version.min_version << '\n';
    str << "    max_version: " << protocol_version.max_version << '\n';
    str << "    spec_version_hash: " << protocol_version.spec_version_hash << '\n';
    str << "    library_version_hash: " << protocol_version.library_version_hash << '\n';
    str << '}';
    return str;
}

bool operator==(const InfoServer::AutopilotVersion& lhs, const InfoServer::AutopilotVersion& rhs)
{
    return (rhs.flight_sw_major == lhs.flight_sw_major) &&
           (rhs.flight_sw_minor == lhs.flight_sw_minor) &&
           (rhs.flight_sw_patch == lhs.flight_sw_patch) &&
           (rhs.flight_sw_vendor_major == lhs.flight_sw_vendor_major) &&
           (rhs.flight_sw_vendor_minor == lhs.flight_sw_vendor_minor) &&
           (rhs.flight_sw_vendor_patch == lhs.flight_sw_vendor_patch) &&
           (rhs.os_sw_major == lhs.os_sw_major) && (rhs.os_sw_minor == lhs.os_sw_minor) &&
           (rhs.os_sw_patch == lhs.os_sw_patch) &&
           (rhs.flight_sw_git_hash == lhs.flight_sw_git_hash) &&
           (rhs.os_sw_git_hash == lhs.os_sw_git_hash);
}

std::ostream& operator<<(std::ostream& str, InfoServer::AutopilotVersion const& autopilot_version)
{
    str << std::setprecision(15);
    str << "autopilot_version:" << '\n' << "{\n";
    str << "    flight_sw_major: " << autopilot_version.flight_sw_major << '\n';
    str << "    flight_sw_minor: " << autopilot_version.flight_sw_minor << '\n';
    str << "    flight_sw_patch: " << autopilot_version.flight_sw_patch << '\n';
    str << "    flight_sw_vendor_major: " << autopilot_version.flight_sw_vendor_major << '\n';
    str << "    flight_sw_vendor_minor: " << autopilot_version.flight_sw_vendor_minor << '\n';
    str << "    flight_sw_vendor_patch: " << autopilot_version.flight_sw_vendor_patch << '\n';
    str << "    os_sw_major: " << autopilot_version.os_sw_major << '\n';
    str << "    os_sw_minor: " << autopilot_version.os_sw_minor << '\n';
    str << "    os_sw_patch: " << autopilot_version.os_sw_patch << '\n';
    str << "    flight_sw_git_hash: " << autopilot_version.flight_sw_git_hash << '\n';
    str << "    os_sw_git_hash: " << autopilot_version.os_sw_git_hash << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, InfoServer::Result const& result)
{
    switch (result) {
        case InfoServer::Result::Unknown:
            return str << "Unknown";
        case InfoServer::Result::Success:
            return str << "Success";
        case InfoServer::Result::InformationNotReceivedYet:
            return str << "Information Not Received Yet";
        case InfoServer::Result::NoSystem:
            return str << "No System";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk